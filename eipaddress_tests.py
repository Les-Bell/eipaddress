#!/usr/bin/env python
"""Unittests for the eipaddress module."""

import random

import eipaddress as eip

try:
    import unittest2 as unittest
except ImportError:
    import unittest

# =============================================================================
# A suite of IPv4 string to int test cases
# =============================================================================

IPV4_STRINGS = [
    ('0.0.0.0',         0),
    ('0.0.0.1',         1),
    ('0.0.0.2',         2),
    ('0.0.0.255',       255),
    ('0.0.1.0',         256),
    ('0.0.1.1',         257),
    ('0.0.1.255',       511),
    ('0.0.2.0',         512),
    ('0.0.2.1',         513),
    ('0.0.255.255',     65535),
    ('0.1.0.0',         65536),
    ('0.1.0.1',         65537),
    ('0.255.255.255',   2**24-1),
    ('1.0.0.0',         2**24),
    ('1.0.0.1',         2**24+1),
    ('255.255.255.255', 2**32-1),
]

IPV4_STRINGS_BAD = [
    ' 0.0.0.0',
    '0.0.0.0 ',
    '0.0. 0.0',
    '00.0 0.0',
    '01.0 0.0',
    '0.256.0.0',
    '0.ff.0.0',
    '0.0.0.1e2',
    '1,1,1,1',
    '::',
    '0::1',
    '',
    '1.2.3.0/24',
    '1.2.3/24',
    '1.2.3',
    '1.2.3.4.5',
]

# =============================================================================
# An extensive suite of IPv6 string to int test cases
# =============================================================================

IPV6_STRINGS_CANONICAL = [
    ('::',                                  0x00000000000000000000000000000000),
    ('::1',                                 0x00000000000000000000000000000001),
    ('fe80::217:f2ff:fe07:ed62',            0xfe800000000000000217f2fffe07ed62),
    ('2::10',                               0x00020000000000000000000000000010),
    ('ff02::1',                             0xff020000000000000000000000000001),
    ('fe80::',                              0xfe800000000000000000000000000000),
    ('2002::',                              0x20020000000000000000000000000000),
    ('2001:db8::',                          0x20010db8000000000000000000000000),
    ('::ffff:0:0',                          0x00000000000000000000ffff00000000),
    ('1:2:3:4:5:6:7:8',                     0x00010002000300040005000600070008),
    ('1:2:3:4:5::8',                        0x00010002000300040005000000000008),
    ('1:2:3:4::8',                          0x00010002000300040000000000000008),
    ('1:2:3::8',                            0x00010002000300000000000000000008),
    ('1:2::8',                              0x00010002000000000000000000000008),
    ('1::8',                                0x00010000000000000000000000000008),
    ('1::2:3:4:5:6',                        0x00010000000000020003000400050006),
    ('1::2:3:4:5',                          0x00010000000000000002000300040005),
    ('1::2:3:4',                            0x00010000000000000000000200030004),
    ('1::2:3',                              0x00010000000000000000000000020003),
    ('1::8',                                0x00010000000000000000000000000008),
    ('::2:3:4:5:6:7',                       0x00000000000200030004000500060007),
    ('::2:3:4:5:6',                         0x00000000000000020003000400050006),
    ('::2:3:4:5',                           0x00000000000000000002000300040005),
    ('::2:3:4',                             0x00000000000000000000000200030004),
    ('::2:3',                               0x00000000000000000000000000020003),
    ('::8',                                 0x00000000000000000000000000000008),
    ('1:2:3:4:5:6::',                       0x00010002000300040005000600000000),
    ('1:2:3:4:5::',                         0x00010002000300040005000000000000),
    ('1:2:3:4::',                           0x00010002000300040000000000000000),
    ('1:2:3::',                             0x00010002000300000000000000000000),
    ('1:2::',                               0x00010002000000000000000000000000),
    ('1::',                                 0x00010000000000000000000000000000),
    ('1:2:3:4::7:8',                        0x00010002000300040000000000070008),
    ('1:2:3::7:8',                          0x00010002000300000000000000070008),
    ('1:2::7:8',                            0x00010002000000000000000000070008),
    ('1::7:8',                              0x00010000000000000000000000070008),
    ('fe80::204:61ff:fe9d:f156',            0xfe80000000000000020461fffe9df156),
    ('fe80::',                              0xfe800000000000000000000000000000),
    ('fe80::1',                             0xfe800000000000000000000000000001),
    ('::ffff:c000:280',                     0x00000000000000000000ffffc0000280),
    ('2001:db8:85a3::8a2e:370:7334',        0x20010db885a3000000008a2e03707334),
    ('2001:db8::1428:57ab',                 0x20010db80000000000000000142857ab),
    ('2001:db8:a::123',                     0x20010db8000a00000000000000000123),
    ('fe80::',                              0xfe800000000000000000000000000000),
    ('1111:2222:3333:4444:5555:6666:7777:8888',
                                            0x11112222333344445555666677778888),
    ('1111:2222:3333:4444:5555:6666::',     0x11112222333344445555666600000000),
    ('1111:2222:3333:4444:5555::',          0x11112222333344445555000000000000),
    ('1111:2222:3333:4444::',               0x11112222333344440000000000000000),
    ('1111:2222:3333::',                    0x11112222333300000000000000000000),
    ('1111:2222::',                         0x11112222000000000000000000000000),
    ('1111::',                              0x11110000000000000000000000000000),
    ('1111:2222:3333:4444:5555::8888',      0x11112222333344445555000000008888),
    ('1111:2222:3333:4444::8888',           0x11112222333344440000000000008888),
    ('1111:2222:3333::8888',                0x11112222333300000000000000008888),
    ('1111:2222::8888',                     0x11112222000000000000000000008888),
    ('1111::8888',                          0x11110000000000000000000000008888),
    ('::8888',                              0x00000000000000000000000000008888),
    ('1111:2222:3333:4444::7777:8888',      0x11112222333344440000000077778888),
    ('1111:2222:3333::7777:8888',           0x11112222333300000000000077778888),
    ('1111:2222::7777:8888',                0x11112222000000000000000077778888),
    ('1111::7777:8888',                     0x11110000000000000000000077778888),
    ('::7777:8888',                         0x00000000000000000000000077778888),
    ('1111:2222:3333::6666:7777:8888',      0x11112222333300000000666677778888),
    ('1111:2222::6666:7777:8888',           0x11112222000000000000666677778888),
    ('1111::6666:7777:8888',                0x11110000000000000000666677778888),
    ('::6666:7777:8888',                    0x00000000000000000000666677778888),
    ('1111:2222::5555:6666:7777:8888',      0x11112222000000005555666677778888),
    ('1111::5555:6666:7777:8888',           0x11110000000000005555666677778888),
    ('::5555:6666:7777:8888',               0x00000000000000005555666677778888),
    ('1111::4444:5555:6666:7777:8888',      0x11110000000044445555666677778888),
    ('::4444:5555:6666:7777:8888',          0x00000000000044445555666677778888),
    ('::3333:4444:5555:6666:7777:8888',     0x00000000333344445555666677778888),
]

IPV6_STRINGS_NON_CANONICAL = [
    ('0:0:0:0:0:0:0:0',                     0x00000000000000000000000000000000),
    ('0:0:0:0:0:0:0:1',                     0x00000000000000000000000000000001),
    ('0000:0000:0000:0000:0000:0000:0000:0000',
                                            0x00000000000000000000000000000000),
    ('0000:0000:0000:0000:0000:0000:0000:0001',
                                            0x00000000000000000000000000000001),
    ('2001:DB8:0:0:8:800:200C:417A',        0x20010db80000000000080800200c417a),
    ('2001:DB8::8:800:200C:417A',           0x20010db80000000000080800200c417a),
    ('FF01:0:0:0:0:0:0:101',                0xff010000000000000000000000000101),
    ('FF01::101',                           0xff010000000000000000000000000101),
    ('2001:0000:1234:0000:0000:C1C0:ABCD:0876',
                                            0x20010000123400000000c1c0abcd0876),
    ('3ffe:0b00:0000:0000:0001:0000:0000:000a',
                                            0x3ffe0b0000000000000100000000000a),
    ('FF02:0000:0000:0000:0000:0000:0000:0001',
                                            0xff020000000000000000000000000001),
    ('fe80::217:f2ff:254.7.237.98',         0xfe800000000000000217f2fffe07ed62),
    ('::ffff:192.168.1.26',                 0x00000000000000000000ffffc0a8011a),
    ('::ffff:192.168.1.1',                  0x00000000000000000000ffffc0a80101),
    ('0:0:0:0:0:0:13.1.68.3',               0x0000000000000000000000000d014403),
    ('0:0:0:0:0:FFFF:129.144.52.38',        0x00000000000000000000ffff81903426),
    ('::13.1.68.3',                         0x0000000000000000000000000d014403),
    ('::FFFF:129.144.52.38',                0x00000000000000000000ffff81903426),
    ('fe80:0:0:0:204:61ff:254.157.241.86',  0xfe80000000000000020461fffe9df156),
    ('fe80::204:61ff:254.157.241.86',       0xfe80000000000000020461fffe9df156),
    ('::ffff:12.34.56.78',                  0x00000000000000000000ffff0c22384e),
    ('::ffff:192.0.2.128',                  0x00000000000000000000ffffc0000280),
    ('fe80:0000:0000:0000:0204:61ff:fe9d:f156',
                                            0xfe80000000000000020461fffe9df156),
    ('fe80:0:0:0:204:61ff:fe9d:f156',       0xfe80000000000000020461fffe9df156),
    ('2001:0db8:85a3:0000:0000:8a2e:0370:7334',
                                            0x20010db885a3000000008a2e03707334),
    ('2001:0db8:0000:0000:0000:0000:1428:57ab',
                                            0x20010db80000000000000000142857ab),
    ('2001:0db8:0000:0000:0000::1428:57ab', 0x20010db80000000000000000142857ab),
    ('2001:0db8:0:0:0:0:1428:57ab',         0x20010db80000000000000000142857ab),
    ('2001:0db8:0:0::1428:57ab',            0x20010db80000000000000000142857ab),
    ('0000:0000:0000:0000:0000:0000:0000:0001',
                                            0x00000000000000000000000000000001),
    ('2001:0db8:1234:0000:0000:0000:0000:0000',
                                            0x20010db8123400000000000000000000),
    ('1111:2222:3333:4444:5555:6666:123.123.123.123',
                                            0x1111222233334444555566667b7b7b7b),
    ('1111:2222:3333:4444:5555::123.123.123.123',
                                            0x1111222233334444555500007b7b7b7b),
    ('1111:2222:3333:4444::123.123.123.123',
                                            0x1111222233334444000000007b7b7b7b),
    ('1111:2222:3333::123.123.123.123',     0x1111222233330000000000007b7b7b7b),
    ('1111:2222::123.123.123.123',          0x1111222200000000000000007b7b7b7b),
    ('1111::123.123.123.123',               0x1111000000000000000000007b7b7b7b),
    ('::123.123.123.123',                   0x0000000000000000000000007b7b7b7b),
    ('1111:2222:3333:4444::6666:123.123.123.123',
                                            0x1111222233334444000066667b7b7b7b),
    ('1111:2222:3333::6666:123.123.123.123',
                                            0x1111222233330000000066667b7b7b7b),
    ('1111:2222::6666:123.123.123.123',     0x1111222200000000000066667b7b7b7b),
    ('1111::6666:123.123.123.123',          0x1111000000000000000066667b7b7b7b),
    ('::6666:123.123.123.123',              0x0000000000000000000066667b7b7b7b),
    ('1111:2222:3333::5555:6666:123.123.123.123',
                                            0x1111222233330000555566667b7b7b7b),
    ('1111:2222::5555:6666:123.123.123.123',
                                            0x1111222200000000555566667b7b7b7b),
    ('1111::5555:6666:123.123.123.123',     0x1111000000000000555566667b7b7b7b),
    ('::5555:6666:123.123.123.123',         0x0000000000000000555566667b7b7b7b),
    ('1111:2222::4444:5555:6666:123.123.123.123',
                                            0x1111222200004444555566667b7b7b7b),
    ('1111::4444:5555:6666:123.123.123.123',
                                            0x1111000000004444555566667b7b7b7b),
    ('::4444:5555:6666:123.123.123.123',    0x0000000000004444555566667b7b7b7b),
    ('1111::3333:4444:5555:6666:123.123.123.123',
                                            0x1111000033334444555566667b7b7b7b),
    ('::2222:3333:4444:5555:6666:123.123.123.123',
                                            0x0000222233334444555566667b7b7b7b),
    ('1:2:3:4:5:6::8',                      0x00010002000300040005000600000008),
    ('1::2:3:4:5:6:7',                      0x00010000000200030004000500060007),
    ('1:2:3:4:5:6:1.2.3.4',                 0x00010002000300040005000601020304),
    ('1:2:3:4:5::1.2.3.4',                  0x00010002000300040005000001020304),
    ('1:2:3:4::1.2.3.4',                    0x00010002000300040000000001020304),
    ('1:2:3::1.2.3.4',                      0x00010002000300000000000001020304),
    ('1:2::1.2.3.4',                        0x00010002000000000000000001020304),
    ('1::1.2.3.4',                          0x00010000000000000000000001020304),
    ('1:2:3:4::5:1.2.3.4',                  0x00010002000300040000000501020304),
    ('1:2:3::5:1.2.3.4',                    0x00010002000300000000000501020304),
    ('1:2::5:1.2.3.4',                      0x00010002000000000000000501020304),
    ('1::5:1.2.3.4',                        0x00010000000000000000000501020304),
    ('1::5:11.22.33.44',                    0x0001000000000000000000050b16212c),
    ('1:2:3:4:5::7:8',                      0x00010002000300040005000000070008),
    ('::2:3:4:5:6:7:8',                     0x00000002000300040005000600070008),
    ('2001:db8:85a3:0:0:8a2e:370:7334',     0x20010db885a3000000008a2e03707334),
    ('2001:0db8:1234::',                    0x20010db8123400000000000000000000),
    ('2001:0db8::1428:57ab',                0x20010db80000000000000000142857ab),
    ('::ffff:0c22:384e',                    0x00000000000000000000ffff0c22384e),
    ('2001:0db8:1234:ffff:ffff:ffff:ffff:ffff',
                                            0x20010db81234ffffffffffffffffffff),
    ('1111:2222:3333:4444:5555:6666:7777::',
                                            0x11112222333344445555666677770000),
    ('1111:2222:3333:4444:5555:6666::8888', 0x11112222333344445555666600008888),
    ('1111:2222:3333:4444:5555::7777:8888', 0x11112222333344445555000077778888),
    ('1111:2222:3333:4444::6666:7777:8888', 0x11112222333344440000666677778888),
    ('1111:2222:3333::5555:6666:7777:8888', 0x11112222333300005555666677778888),
    ('1111:2222::4444:5555:6666:7777:8888', 0x11112222000044445555666677778888),
    ('1111::3333:4444:5555:6666:7777:8888', 0x11110000333344445555666677778888),
    ('::2222:3333:4444:5555:6666:7777:8888',
                                            0x00002222333344445555666677778888),
    ('::0:0:0:0:0:0:0',                     0x00000000000000000000000000000000),
    ('::0:0:0:0:0:0',                       0x00000000000000000000000000000000),
    ('::0:0:0:0:0',                         0x00000000000000000000000000000000),
    ('::0:0:0:0',                           0x00000000000000000000000000000000),
    ('::0:0:0',                             0x00000000000000000000000000000000),
    ('::0:0',                               0x00000000000000000000000000000000),
    ('::0',                                 0x00000000000000000000000000000000),
    ('0:0:0:0:0:0:0::',                     0x00000000000000000000000000000000),
    ('0:0:0:0:0:0::',                       0x00000000000000000000000000000000),
    ('0:0:0:0:0::',                         0x00000000000000000000000000000000),
    ('0:0:0:0::',                           0x00000000000000000000000000000000),
    ('0:0:0::',                             0x00000000000000000000000000000000),
    ('0:0::',                               0x00000000000000000000000000000000),
    ('0::',                                 0x00000000000000000000000000000000),
    ('0:a:b:c:d:e:f::',                     0x0000000a000b000c000d000e000f0000),
    ('::0:a:b:c:d:e:f',                     0x00000000000a000b000c000d000e000f),
    ('a:b:c:d:e:f:0::',                     0x000a000b000c000d000e000f00000000),
]

IPV6_STRINGS_SCOPE = [
    ('::%1',                                0x00000000000000000000000000000000),
    ('::1%abc',                             0x00000000000000000000000000000001),
    ('2::10%1abc',                          0x00020000000000000000000000000010),
    ('ff02::1%100',                         0xff020000000000000000000000000001),
    ('2002::%1',                            0x20020000000000000000000000000000),
    ('1111:2222:3333:4444:5555:6666:7777:8888%22',
                                            0x11112222333344445555666677778888),
]

IPV6_STRINGS = IPV6_STRINGS_CANONICAL + IPV6_STRINGS_NON_CANONICAL

IPV6_STRINGS_BAD = [
    '',
    '2001:DB8:0:0:8:800:200C:417A:221',
    'FF01::101::2',
    '02001:0000:1234:0000:0000:C1C0:ABCD:0876',
    '2001:0000:1234:0000:00001:C1C0:ABCD:0876',
    '2001:0000:1234:0000:0000:C1C0:ABCD:0876  0',
    '2001:0000:1234: 0000:0000:C1C0:ABCD:0876',
    '3ffe:0b00:0000:0001:0000:0000:000a',
    'FF02:0000:0000:0000:0000:0000:0000:0000:0001',
    '3ffe:b00::1::a',
    '::1111:2222:3333:4444:5555:6666::',
    '1:2:3::4:5::7:8',
    '12345::6:7:8',
    '1::5:11.22.33.44:0',
    '1::5:400.2.3.4',
    '1::5:260.2.3.4',
    '1::5:256.2.3.4',
    '1::5:1.256.3.4',
    '1::5:1.2.256.4',
    '1::5:1.2.3.256',
    '1::5:300.2.3.4',
    '1::5:1.300.3.4',
    '1::5:1.2.300.4',
    '1::5:1.2.3.300',
    '1::5:900.2.3.4',
    '1::5:1.900.3.4',
    '1::5:1.2.900.4',
    '1::5:1.2.3.900',
    '1::5:300.300.300.300',
    '1::5:3000.30.30.30',
    '1::400.2.3.4',
    '1::260.2.3.4',
    '1::256.2.3.4',
    '1::1.256.3.4',
    '1::1.2.256.4',
    '1::1.2.3.256',
    '1::300.2.3.4',
    '1::1.300.3.4',
    '1::1.2.300.4',
    '1::1.2.3.300',
    '1::900.2.3.4',
    '1::1.900.3.4',
    '1::1.2.900.4',
    '1::1.2.3.900',
    '1::300.300.300.300',
    '1::3000.30.30.30',
    '::400.2.3.4',
    '::260.2.3.4',
    '::256.2.3.4',
    '::1.256.3.4',
    '::1.2.256.4',
    '::1.2.3.256',
    '::300.2.3.4',
    '::1.300.3.4',
    '::1.2.300.4',
    '::1.2.3.300',
    '::900.2.3.4',
    '::1.900.3.4',
    '::1.2.900.4',
    '::1.2.3.900',
    '::300.300.300.300',
    '::3000.30.30.30',
    '2001:1:1:1:1:1:255Z255X255Y255',
    '::ffff:192x168.1.26',
    '::ffff:2.3.4',
    '::ffff:257.1.2.3',
    '1.2.3.4',
    '1.2.3.4:1111:2222:3333:4444::5555',
    '1.2.3.4:1111:2222:3333::5555',
    '1.2.3.4:1111:2222::5555',
    '1.2.3.4:1111::5555',
    '1.2.3.4::5555',
    '1.2.3.4::',
    'fe80:0000:0000:0000:0204:61ff:254.157.241.086',
    'XXXX:XXXX:XXXX:XXXX:XXXX:XXXX:1.2.3.4',
    '1111:2222:3333:4444:5555:6666:00.00.00.00',
    '1111:2222:3333:4444:5555:6666:000.000.000.000',
    '1111:2222:3333:4444:5555:6666:256.256.256.256',
    '1111:2222:3333:4444::5555:',
    '1111:2222:3333::5555:',
    '1111:2222::5555:',
    '1111::5555:',
    '::5555:',
    ':::',
    '1111:',
    ':',
    ':1111:2222:3333:4444::5555',
    ':1111:2222:3333::5555',
    ':1111:2222::5555',
    ':1111::5555',
    ':::5555',
    '123',
    'ldkfj',
    '2001::FFD3::57ab',
    '2001:db8:85a3::8a2e:37023:7334',
    '2001:db8:85a3::8a2e:370k:7334',
    '1:2:3:4:5:6:7:8:9',
    '1::2::3',
    '1:::3:4:5',
    '1:2:3::4:5:6:7:8:9',
    'XXXX:XXXX:XXXX:XXXX:XXXX:XXXX:XXXX:XXXX',
    '1111:2222:3333:4444:5555:6666:7777:8888:9999',
    '1111:2222:3333:4444:5555:6666:7777:8888::',
    '::2222:3333:4444:5555:6666:7777:8888:9999',
    '1111:2222:3333:4444:5555:6666:7777',
    '1111:2222:3333:4444:5555:6666',
    '1111:2222:3333:4444:5555',
    '1111:2222:3333:4444',
    '1111:2222:3333',
    '1111:2222',
    '1111',
    '11112222:3333:4444:5555:6666:7777:8888',
    '1111:22223333:4444:5555:6666:7777:8888',
    '1111:2222:33334444:5555:6666:7777:8888',
    '1111:2222:3333:44445555:6666:7777:8888',
    '1111:2222:3333:4444:55556666:7777:8888',
    '1111:2222:3333:4444:5555:66667777:8888',
    '1111:2222:3333:4444:5555:6666:77778888',
    '1111:2222:3333:4444:5555:6666:7777:8888:',
    '1111:2222:3333:4444:5555:6666:7777:',
    '1111:2222:3333:4444:5555:6666:',
    '1111:2222:3333:4444:5555:',
    '1111:2222:3333:4444:',
    '1111:2222:3333:',
    '1111:2222:',
    '1111:',
    ':',
    ':8888',
    ':7777:8888',
    ':6666:7777:8888',
    ':5555:6666:7777:8888',
    ':4444:5555:6666:7777:8888',
    ':3333:4444:5555:6666:7777:8888',
    ':2222:3333:4444:5555:6666:7777:8888',
    ':1111:2222:3333:4444:5555:6666:7777:8888',
    ':::2222:3333:4444:5555:6666:7777:8888',
    '1111:::3333:4444:5555:6666:7777:8888',
    '1111:2222:::4444:5555:6666:7777:8888',
    '1111:2222:3333:::5555:6666:7777:8888',
    '1111:2222:3333:4444:::6666:7777:8888',
    '1111:2222:3333:4444:5555:::7777:8888',
    '1111:2222:3333:4444:5555:6666:::8888',
    '1111:2222:3333:4444:5555:6666:7777:::',
    '::2222::4444:5555:6666:7777:8888',
    '::2222:3333::5555:6666:7777:8888',
    '::2222:3333:4444::6666:7777:8888',
    '::2222:3333:4444:5555::7777:8888',
    '::2222:3333:4444:5555:7777::8888',
    '::2222:3333:4444:5555:7777:8888::',
    '1111::3333::5555:6666:7777:8888',
    '1111::3333:4444::6666:7777:8888',
    '1111::3333:4444:5555::7777:8888',
    '1111::3333:4444:5555:6666::8888',
    '1111::3333:4444:5555:6666:7777::',
    '1111:2222::4444::6666:7777:8888',
    '1111:2222::4444:5555::7777:8888',
    '1111:2222::4444:5555:6666::8888',
    '1111:2222::4444:5555:6666:7777::',
    '1111:2222:3333::5555::7777:8888',
    '1111:2222:3333::5555:6666::8888',
    '1111:2222:3333::5555:6666:7777::',
    '1111:2222:3333:4444::6666::8888',
    '1111:2222:3333:4444::6666:7777::',
    '1111:2222:3333:4444:5555::7777::',
    '1111:2222:3333:4444:5555:6666:7777:8888:1.2.3.4',
    '1111:2222:3333:4444:5555:6666:7777:1.2.3.4',
    '1111:2222:3333:4444:5555:6666::1.2.3.4',
    '::2222:3333:4444:5555:6666:7777:1.2.3.4',
    '1111:2222:3333:4444:5555:6666:1.2.3.4.5',
    '1111:2222:3333:4444:5555:1.2.3.4',
    '1111:2222:3333:4444:1.2.3.4',
    '1111:2222:3333:1.2.3.4',
    '1111:2222:1.2.3.4',
    '1111:1.2.3.4',
    '1.2.3.4',
    '11112222:3333:4444:5555:6666:1.2.3.4',
    '1111:22223333:4444:5555:6666:1.2.3.4',
    '1111:2222:33334444:5555:6666:1.2.3.4',
    '1111:2222:3333:44445555:6666:1.2.3.4',
    '1111:2222:3333:4444:55556666:1.2.3.4',
    '1111:2222:3333:4444:5555:66661.2.3.4',
    '1111:2222:3333:4444:5555:6666:255255.255.255',
    '1111:2222:3333:4444:5555:6666:255.255255.255',
    '1111:2222:3333:4444:5555:6666:255.255.255255',
    ':1.2.3.4',
    ':6666:1.2.3.4',
    ':5555:6666:1.2.3.4',
    ':4444:5555:6666:1.2.3.4',
    ':3333:4444:5555:6666:1.2.3.4',
    ':2222:3333:4444:5555:6666:1.2.3.4',
    ':1111:2222:3333:4444:5555:6666:1.2.3.4',
    ':::2222:3333:4444:5555:6666:1.2.3.4',
    '1111:::3333:4444:5555:6666:1.2.3.4',
    '1111:2222:::4444:5555:6666:1.2.3.4',
    '1111:2222:3333:::5555:6666:1.2.3.4',
    '1111:2222:3333:4444:::6666:1.2.3.4',
    '1111:2222:3333:4444:5555:::1.2.3.4',
    '::2222::4444:5555:6666:1.2.3.4',
    '::2222:3333::5555:6666:1.2.3.4',
    '::2222:3333:4444::6666:1.2.3.4',
    '::2222:3333:4444:5555::1.2.3.4',
    '1111::3333::5555:6666:1.2.3.4',
    '1111::3333:4444::6666:1.2.3.4',
    '1111::3333:4444:5555::1.2.3.4',
    '1111:2222::4444::6666:1.2.3.4',
    '1111:2222::4444:5555::1.2.3.4',
    '1111:2222:3333::5555::1.2.3.4',
    '::.',
    '::..',
    '::...',
    '::1...',
    '::1.2..',
    '::1.2.3.',
    '::.2..',
    '::.2.3.',
    '::.2.3.4',
    '::..3.',
    '::..3.4',
    '::...4',
    ':1111:2222:3333:4444:5555:6666:7777::',
    ':1111:2222:3333:4444:5555:6666::',
    ':1111:2222:3333:4444:5555::',
    ':1111:2222:3333:4444::',
    ':1111:2222:3333::',
    ':1111:2222::',
    ':1111::',
    ':1111:2222:3333:4444:5555:6666::8888',
    ':1111:2222:3333:4444:5555::8888',
    ':1111:2222:3333:4444::8888',
    ':1111:2222:3333::8888',
    ':1111:2222::8888',
    ':1111::8888',
    ':::8888',
    ':1111:2222:3333:4444:5555::7777:8888',
    ':1111:2222:3333:4444::7777:8888',
    ':1111:2222:3333::7777:8888',
    ':1111:2222::7777:8888',
    ':1111::7777:8888',
    ':::7777:8888',
    ':1111:2222:3333:4444::6666:7777:8888',
    ':1111:2222:3333::6666:7777:8888',
    ':1111:2222::6666:7777:8888',
    ':1111::6666:7777:8888',
    ':::6666:7777:8888',
    ':1111:2222:3333::5555:6666:7777:8888',
    ':1111:2222::5555:6666:7777:8888',
    ':1111::5555:6666:7777:8888',
    ':::5555:6666:7777:8888',
    ':1111:2222::4444:5555:6666:7777:8888',
    ':1111::4444:5555:6666:7777:8888',
    ':::4444:5555:6666:7777:8888',
    ':1111::3333:4444:5555:6666:7777:8888',
    ':::3333:4444:5555:6666:7777:8888',
    ':::2222:3333:4444:5555:6666:7777:8888',
    ':1111:2222:3333:4444:5555:6666:1.2.3.4',
    ':1111:2222:3333:4444:5555::1.2.3.4',
    ':1111:2222:3333:4444::1.2.3.4',
    ':1111:2222:3333::1.2.3.4',
    ':1111:2222::1.2.3.4',
    ':1111::1.2.3.4',
    ':::1.2.3.4',
    ':1111:2222:3333:4444::6666:1.2.3.4',
    ':1111:2222:3333::6666:1.2.3.4',
    ':1111:2222::6666:1.2.3.4',
    ':1111::6666:1.2.3.4',
    ':::6666:1.2.3.4',
    ':1111:2222:3333::5555:6666:1.2.3.4',
    ':1111:2222::5555:6666:1.2.3.4',
    ':1111::5555:6666:1.2.3.4',
    ':::5555:6666:1.2.3.4',
    ':1111:2222::4444:5555:6666:1.2.3.4',
    ':1111::4444:5555:6666:1.2.3.4',
    ':::4444:5555:6666:1.2.3.4',
    ':1111::3333:4444:5555:6666:1.2.3.4',
    ':::2222:3333:4444:5555:6666:1.2.3.4',
    '1111:2222:3333:4444:5555:6666:7777:::',
    '1111:2222:3333:4444:5555:6666:::',
    '1111:2222:3333:4444:5555:::',
    '1111:2222:3333:4444:::',
    '1111:2222:3333:::',
    '1111:2222:::',
    '1111:::',
    '1111:2222:3333:4444:5555:6666::8888:',
    '1111:2222:3333:4444:5555::8888:',
    '1111:2222:3333:4444::8888:',
    '1111:2222:3333::8888:',
    '1111:2222::8888:',
    '1111::8888:',
    '::8888:',
    '1111:2222:3333:4444:5555::7777:8888:',
    '1111:2222:3333:4444::7777:8888:',
    '1111:2222:3333::7777:8888:',
    '1111:2222::7777:8888:',
    '1111::7777:8888:',
    '::7777:8888:',
    '1111:2222:3333:4444::6666:7777:8888:',
    '1111:2222:3333::6666:7777:8888:',
    '1111:2222::6666:7777:8888:',
    '1111::6666:7777:8888:',
    '::6666:7777:8888:',
    '1111:2222:3333::5555:6666:7777:8888:',
    '1111:2222::5555:6666:7777:8888:',
    '1111::5555:6666:7777:8888:',
    '::5555:6666:7777:8888:',
    '1111:2222::4444:5555:6666:7777:8888:',
    '1111::4444:5555:6666:7777:8888:',
    '::4444:5555:6666:7777:8888:',
    '1111::3333:4444:5555:6666:7777:8888:',
    '::3333:4444:5555:6666:7777:8888:',
    '::2222:3333:4444:5555:6666:7777:8888:',
    "':10.0.0.1",
    '[2001:0000:1234:0000:0000:C1C0:ABCD:0876',
    '2001:0000:1234:0000:0000:C1C0:ABCD:0876]',
    '2c0f:fff0::  ',
    '2c0f:fff0:ffff:ffff:ffff:ffff:ffff:ffff  ',
    ':',
    '::1.2.3.4:5',
    '1000:1.2.3.4::',
    '1000:1.2.3.4::abcd',
    '1.2.3.4::abcd',
    '1000::1.2.3.4:abcd',
    '1000::1.2.3.4:5.6.7.8',
]

# =============================================================================

class IpaddrTests(unittest.TestCase):
    """Unitttests for the eipaddress module."""

    # =========================================================================
    # IP address string to/from integer conversion functions
    # =========================================================================

    def test_ishexdigit(self):
        """Test the ishexdigit function."""
        self.assertTrue(eip.ishexdigit('0123456789ABCDEFabcdef'))
        bad = set([chr(x) for x in range(256)]) - set('0123456789ABCDEFabcdef')
        for c in bad:
            self.assertFalse(eip.ishexdigit(c), c)
        self.assertFalse(eip.ishexdigit(''))

    def test_ipv4_from_string(self):
        """Test the IPv4Address.from_string function."""
        fn = eip.IPv4Address.from_string
        for addr_str, addr_int in IPV4_STRINGS:
            self.assertEqual(fn(addr_str), addr_int,
                             '"%s" - %s' % (addr_str, addr_int))
        exc = eip.AddressValueError
        for addr_str in IPV4_STRINGS_BAD:
            with self.assertRaises(exc, msg=addr_str):
                fn(addr_str)

    def test_ipv6_from_string(self):
        """Test the IPv6Address.from_string function."""
        fn = eip.IPv6Address.from_string
        for addr_str, addr_int in IPV6_STRINGS:
            self.assertEqual(fn(addr_str), addr_int,
                             '"%s" - %s' % (addr_str, addr_int))
        exc = eip.AddressValueError
        for addr_str in IPV6_STRINGS_BAD + [x[0] for x in IPV6_STRINGS_SCOPE]:
            with self.assertRaises(exc, msg=addr_str):
                fn(addr_str)

    def test_ipv6_from_string_with_scope(self):
        """Test the IPv6Address.from_string_with_scope function."""
        fn = eip.IPv6Address.from_string_with_scope
        for addr_str, addr_int in IPV6_STRINGS:
            self.assertEqual(fn(addr_str), (addr_int, None),
                             '"%s" - %s' % (addr_str, addr_int))
        for addr_str, addr_int in IPV6_STRINGS_SCOPE:
            self.assertEqual(fn(addr_str), (addr_int, addr_str.split('%')[1]),
                             '"%s" - %s' % (addr_str, addr_int))
        exc = eip.AddressValueError
        for addr_str in IPV6_STRINGS_BAD:
            with self.assertRaises(exc, msg=addr_str):
                fn(addr_str)

    def test_ipv6_scope_id(self):
        """Test the IPv6Address.from_string_with_scope function."""
        for addr_str, addr_int in IPV6_STRINGS:
            addr = eip.IPv6Address(addr_str)
            self.assertEqual(addr.scope_id, None, addr_str)
            iface = eip.IPv6Interface(addr_str)
            self.assertEqual(iface.scope_id, None, addr_str)
        for addr_str, addr_int in IPV6_STRINGS_SCOPE:
            addr = eip.IPv6Address(addr_str)
            self.assertEqual(addr.scope_id, addr_str.split('%')[1], addr_str)
            iface = eip.IPv6Interface(addr_str)
            self.assertEqual(iface.scope_id, addr_str.split('%')[1], addr_str)

    def test_ipv4_to_string(self):
        """Test the IPv4Address.to_string function."""
        fn = eip.IPv4Address.to_string
        for addr_str, addr_int in IPV4_STRINGS:
            self.assertEqual(fn(addr_int), addr_str,
                             '"%s" - %s' % (addr_str, addr_int))
        # Bad IP addresses
        exc = eip.AddressValueError
        self.assertRaises(exc, fn, -1)
        self.assertRaises(exc, fn, 2**32)
        self.assertRaises(exc, fn, 2**32 + 1)

    def test_ipv6_to_string(self):
        """Test the IPv6Address.to_string function."""
        fn = eip.IPv6Address.to_string
        # Good IP addresses and their integer values
        for addr_str, addr_int in IPV6_STRINGS_CANONICAL:
            self.assertEqual(fn(addr_int), addr_str,
                             '"%s" - %s' % (addr_str, addr_int))
        # Bad IP addresses
        exc = eip.AddressValueError
        self.assertRaises(exc, fn, -1)
        self.assertRaises(exc, fn, 2**128)
        self.assertRaises(exc, fn, 2**128 + 1)

    def test_ipv6_to_string_exploded(self):
        """Test the IPv6Address.to_string_exploded function."""
        fn = eip.IPv6Address.to_string_exploded
        # Good IP addresses and their integer values
        self.assertEqual(fn(0),      '0000:0000:0000:0000:0000:0000:0000:0000')
        self.assertEqual(fn(1),      '0000:0000:0000:0000:0000:0000:0000:0001')
        self.assertEqual(fn(2),      '0000:0000:0000:0000:0000:0000:0000:0002')
        self.assertEqual(fn(255),    '0000:0000:0000:0000:0000:0000:0000:00ff')
        self.assertEqual(fn(256),    '0000:0000:0000:0000:0000:0000:0000:0100')
        self.assertEqual(fn(257),    '0000:0000:0000:0000:0000:0000:0000:0101')
        self.assertEqual(fn(65535),  '0000:0000:0000:0000:0000:0000:0000:ffff')
        self.assertEqual(fn(65536),  '0000:0000:0000:0000:0000:0000:0001:0000')
        self.assertEqual(fn(65537),  '0000:0000:0000:0000:0000:0000:0001:0001')
        self.assertEqual(fn(2**112), '0001:0000:0000:0000:0000:0000:0000:0000')
        self.assertEqual(fn(2**112 + 1),
                                     '0001:0000:0000:0000:0000:0000:0000:0001')
        self.assertEqual(fn(2**128 - 1),
                                     'ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff')
        # Bad IP addresses
        exc = eip.AddressValueError
        self.assertRaises(exc, fn, -1)
        self.assertRaises(exc, fn, 2**128)

    # =========================================================================
    # class _BaseIP methods
    # =========================================================================

    def test_max_prefixlen(self):
        """Test the _BaseIP.max_prefixlen method."""
        addr = eip.IPv4Address((0))
        self.assertEqual(addr.max_prefixlen, 32)
        addr = eip.IPv6Address((0))
        self.assertEqual(addr.max_prefixlen, 128)
        for i in range(33):
            net = eip.IPv4Network((0, i))
            self.assertEqual(net.max_prefixlen, 32)
            iface = eip.IPv4Interface((1))
            self.assertEqual(iface.max_prefixlen, 32)
        for i in range(129):
            net = eip.IPv6Network((0, i))
            self.assertEqual(net.max_prefixlen, 128)
            iface = eip.IPv6Interface((1))
            self.assertEqual(iface.max_prefixlen, 128)

    # =========================================================================
    # class IPv4Address methods
    # =========================================================================

    def test_ipv4address_init(self):
        """Test the IPv4Address.__init__ method."""
        i = (1 << 24) + (2 << 16) + (3 << 8) + 4
        values = [
            ('0.0.0.0', 0),
            (0, 0),
            (999, 999),
            ('3.0.0.0', 3 * 2**24),
            (i, i),
            (i.to_bytes(4, 'big'), i),
        ]
        for address, ip in values:
            addr = eip.IPv4Address(address)
            self.assertEqual(int(addr), ip)
            self.assertEqual(addr.version, 4)
        # Bad IP addresses
        def fn(val):
            return eip.IPv4Address(val)
        self.assertRaises(eip.AddressValueError, fn, '1.2.3.4.5')
        self.assertRaises(eip.AddressValueError, fn, -1)
        self.assertRaises(eip.AddressValueError, fn, 2**32)
        self.assertRaises(eip.AddressValueError, fn, 1.0)

    def test_ipv4address_int(self):
        """Test the BaseIPAddress.int method."""
        addr = eip.IPv4Address('0.0.0.0')
        self.assertEqual(addr.__int__(), 0)
        addr = eip.IPv4Address('2.0.0.0')
        self.assertEqual(addr.__int__(), 2 * 2**24)
        addr = eip.IPv4Address('255.255.255.255')
        self.assertEqual(addr.__int__(), 2**32 - 1)

    def test_ipv4address_str(self):
        """Test the BaseIPAddress.str method."""
        addr = eip.IPv4Address('0.0.0.0')
        self.assertEqual(addr.__str__(), '0.0.0.0')
        addr = eip.IPv4Address('2.0.0.0')
        self.assertEqual(addr.__str__(), '2.0.0.0')
        addr = eip.IPv4Address('255.255.255.255')
        self.assertEqual(addr.__str__(), '255.255.255.255')

    def test_ipv4address_repr(self):
        """Test the BaseIPAddress.repr method."""
        addr = eip.IPv4Address('0.0.0.0')
        self.assertEqual(addr.__repr__(), "IPv4Address('0.0.0.0')")
        addr = eip.IPv4Address('2.0.0.0')
        self.assertEqual(addr.__repr__(), "IPv4Address('2.0.0.0')")
        addr = eip.IPv4Address('255.255.255.255')
        self.assertEqual(addr.__repr__(), "IPv4Address('255.255.255.255')")

    def test_ipv4address_compressed(self):
        """Test the BaseIPAddress.compressed method."""
        addr = eip.IPv4Address('0.0.0.0')
        self.assertEqual(addr.compressed, '0.0.0.0')
        addr = eip.IPv4Address('2.0.0.0')
        self.assertEqual(addr.compressed, '2.0.0.0')
        addr = eip.IPv4Address('255.255.255.255')
        self.assertEqual(addr.compressed, '255.255.255.255')

    def test_ipv4address_exploded(self):
        """Test the BaseIPAddress.exploded method."""
        addr = eip.IPv4Address('0.0.0.0')
        self.assertEqual(addr.exploded, '0.0.0.0')
        addr = eip.IPv4Address('2.0.0.0')
        self.assertEqual(addr.exploded, '2.0.0.0')
        addr = eip.IPv4Address('255.255.255.255')
        self.assertEqual(addr.exploded, '255.255.255.255')

    def test_ip_address_format(self):
        """Test the BaseIPAddress.format method."""
        data = [
            (eip.IPv4Address('11.22.33.44'),
             '11.22.33.44',                                  # %s
             '00001011000101100010000100101100',             # %b
             '0b00001011000101100010000100101100',           # %#b
             '0000_1011_0001_0110_0010_0001_0010_1100',      # %_b
             '0b0000_1011_0001_0110_0010_0001_0010_1100',    # %#_b
             '0b16212c',                                     # %x
             '0x0b16212c',                                   # %#x
             '0b16_212c',                                    # %_x
             '0x0b16_212c',                                  # %#_x
             '0B16212C',                                     # %X
             '0X0B16212C',                                   # %#X
             '0B16_212C',                                    # %_X
             '0X0B16_212C',                                  # %#_X
             '00001011000101100010000100101100',             # %n
            ),
            (eip.IPv6Address('2000:1234::abcd'),
             '2000:1234::abcd',                              # %s
             '00100000000000000001001000110100000000000000000000000000000000000000000000000000000000000000000000000000000000001010101111001101',   # %b
             '0b00100000000000000001001000110100000000000000000000000000000000000000000000000000000000000000000000000000000000001010101111001101', # %#b
             '0010_0000_0000_0000_0001_0010_0011_0100_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_1010_1011_1100_1101',    # %_b
             '0b0010_0000_0000_0000_0001_0010_0011_0100_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_1010_1011_1100_1101',  # %#_b
             '2000123400000000000000000000abcd',             # %x
             '0x2000123400000000000000000000abcd',           # %#x
             '2000_1234_0000_0000_0000_0000_0000_abcd',      # %_x
             '0x2000_1234_0000_0000_0000_0000_0000_abcd',    # %#_x
             '2000123400000000000000000000ABCD',             # %X
             '0X2000123400000000000000000000ABCD',           # %#X
             '2000_1234_0000_0000_0000_0000_0000_ABCD',      # %_X
             '0X2000_1234_0000_0000_0000_0000_0000_ABCD',    # %#_X
             '2000123400000000000000000000abcd',             # %n
            )
        ]

        for (addr, fs, fb, fhb, f_b, fh_b, fx, fhx, f_x, fh_x,
                fX, fhX, f_X, fh_X, fn) in data:
            self.assertEqual(f'{addr:s}', fs)
            self.assertEqual(f'{addr:b}', fb)
            self.assertEqual(f'{addr:#b}', fhb)
            self.assertEqual(f'{addr:_b}', f_b)
            self.assertEqual(f'{addr:#_b}', fh_b)
            self.assertEqual(f'{addr:x}', fx)
            self.assertEqual(f'{addr:#x}', fhx)
            self.assertEqual(f'{addr:_x}', f_x)
            self.assertEqual(f'{addr:#_x}', fh_x)
            self.assertEqual(f'{addr:X}', fX)
            self.assertEqual(f'{addr:#X}', fhX)
            self.assertEqual(f'{addr:_X}', f_X)
            self.assertEqual(f'{addr:#_X}', fh_X)
            self.assertEqual(f'{addr:n}', fn)

    def test_ipv4address_eq(self):
        """Test the BaseIPAddress.__eq__ method."""
        addr1 = eip.IPv4Address('0.0.1.0')
        addr1a = eip.IPv4Address('0.0.1.0')
        addr2 = eip.IPv4Address('0.0.2.0')
        self.assertTrue(addr1.__eq__(addr1))
        self.assertTrue(addr1.__eq__(addr1a))
        self.assertFalse(addr1.__eq__(addr2))
        self.assertFalse(addr2.__eq__(addr1))
        self.assertEqual(addr1.__eq__(7), NotImplemented)
        net = addr1._network_class(addr1._ip)
        self.assertEqual(addr1.__eq__(net), NotImplemented)

    def test_ipv4address_ne(self):
        """Test the BaseIPAddress.__ne__ method."""
        addr1 = eip.IPv4Address('0.0.1.0')
        addr1a = eip.IPv4Address('0.0.1.0')
        addr2 = eip.IPv4Address('0.0.2.0')
        self.assertFalse(addr1.__ne__(addr1))
        self.assertFalse(addr1.__ne__(addr1a))
        self.assertTrue(addr1.__ne__(addr2))
        self.assertTrue(addr2.__ne__(addr1))
        self.assertEqual(addr1.__ne__(7), NotImplemented)
        net = addr1._network_class(addr1._ip)
        self.assertEqual(addr1.__ne__(net), NotImplemented)

    def test_ipv4address_lt(self):
        """Test the BaseIPAddress.__lt__ method."""
        addr1 = eip.IPv4Address('0.0.1.0')
        addr1a = eip.IPv4Address('0.0.1.0')
        addr2 = eip.IPv4Address('0.0.2.0')
        self.assertFalse(addr1.__lt__(addr1))
        self.assertFalse(addr1.__lt__(addr1a))
        self.assertTrue(addr1.__lt__(addr2))
        self.assertFalse(addr2.__lt__(addr1))
        self.assertEqual(addr1.__lt__(7), NotImplemented)
        net = addr1._network_class(addr1._ip)
        self.assertEqual(addr1.__lt__(net), NotImplemented)

    def test_ipv4address_le(self):
        """Test the BaseIPAddress.__le__ method."""
        addr1 = eip.IPv4Address('0.0.1.0')
        addr1a = eip.IPv4Address('0.0.1.0')
        addr2 = eip.IPv4Address('0.0.2.0')
        self.assertTrue(addr1.__le__(addr1))
        self.assertTrue(addr1.__le__(addr1a))
        self.assertTrue(addr1.__le__(addr2))
        self.assertFalse(addr2.__le__(addr1))
        self.assertEqual(addr1.__le__(7), NotImplemented)
        net = addr1._network_class(addr1._ip)
        self.assertEqual(addr1.__le__(net), NotImplemented)

    def test_ipv4address_gt(self):
        """Test the BaseIPAddress.__gt__ method."""
        addr1 = eip.IPv4Address('0.0.1.0')
        addr1a = eip.IPv4Address('0.0.1.0')
        addr2 = eip.IPv4Address('0.0.2.0')
        self.assertFalse(addr1.__gt__(addr1))
        self.assertFalse(addr1.__gt__(addr1a))
        self.assertFalse(addr1.__gt__(addr2))
        self.assertTrue(addr2.__gt__(addr1))
        self.assertEqual(addr1.__gt__(7), NotImplemented)
        net = addr1._network_class(addr1._ip)
        self.assertEqual(addr1.__gt__(net), NotImplemented)

    def test_ipv4address_ge(self):
        """Test the BaseIPAddress.__ge__ method."""
        addr1 = eip.IPv4Address('0.0.1.0')
        addr1a = eip.IPv4Address('0.0.1.0')
        addr2 = eip.IPv4Address('0.0.2.0')
        self.assertTrue(addr1.__ge__(addr1))
        self.assertTrue(addr1.__ge__(addr1a))
        self.assertFalse(addr1.__ge__(addr2))
        self.assertTrue(addr2.__ge__(addr1))
        self.assertEqual(addr1.__ge__(7), NotImplemented)
        net = addr1._network_class(addr1._ip)
        self.assertEqual(addr1.__ge__(net), NotImplemented)

    def test_ipv4address_add(self):
        """Test the BaseIPAddress.__add__ method."""
        addr1 = eip.IPv4Address('0.0.1.0')
        addr2 = eip.IPv4Address('0.0.2.0')
        addr3 = eip.IPv4Address('0.0.0.254')
        self.assertEqual(addr1 + 256, addr2)
        self.assertEqual(addr2 + -256, addr1)
        self.assertEqual(addr3 + 2, addr1)
        self.assertEqual(addr1 + -2, addr3)
        # exceptions
        def fn(addr, other):
            return addr + other
        self.assertRaises(TypeError, fn, addr1, 1.0)

    def test_ipv4address_sub(self):
        """Test the BaseIPAddress.__sub__ method."""
        addr1 = eip.IPv4Address('0.0.1.0')
        addr2 = eip.IPv4Address('0.0.2.0')
        addr3 = eip.IPv4Address('0.0.0.254')
        self.assertEqual(addr2 - 256, addr1)
        self.assertEqual(addr1 - -256, addr2)
        self.assertEqual(addr1 - 2, addr3)
        self.assertEqual(addr3 - -2, addr1)
        # exceptions
        def fn(addr, other):
            return addr - other
        self.assertRaises(TypeError, fn, addr1, 1.0)

    def test_address_hash(self):
        """Test the BaseIPAddress.hash method."""
        # IPv4
        addr1 = eip.IPv4Address('0.0.1.0')
        addr2 = eip.IPv4Address('0.0.2.0')
        self.assertNotEqual(addr1.__hash__(), addr2.__hash__())
        # IPv6
        addr1 = eip.IPv6Address('::1:0')
        addr2 = eip.IPv6Address('::2:0')
        self.assertNotEqual(addr1.__hash__(), addr2.__hash__())

    def test_ipv4address_is_reserved(self):
        """Test the IPv4Address.is_reserved method."""
        self.assertFalse(eip.IPv4Address('239.255.255.255').is_reserved)
        self.assertTrue(eip.IPv4Address('240.0.0.0').is_reserved)
        self.assertTrue(eip.IPv4Address('255.255.255.255').is_reserved)

    def test_ipv4address_is_private(self):
        """Test the IPv4Address.is_private method."""
        self.assertFalse(eip.IPv4Address('9.255.255.255').is_private)
        self.assertTrue(eip.IPv4Address('10.0.0.0').is_private)
        self.assertTrue(eip.IPv4Address('10.255.255.255').is_private)
        self.assertFalse(eip.IPv4Address('11.0.0.0').is_private)
        self.assertFalse(eip.IPv4Address('172.15.255.255').is_private)
        self.assertTrue(eip.IPv4Address('172.16.0.0').is_private)
        self.assertTrue(eip.IPv4Address('172.31.255.255').is_private)
        self.assertFalse(eip.IPv4Address('172.32.0.0').is_private)
        self.assertFalse(eip.IPv4Address('192.167.255.255').is_private)
        self.assertTrue(eip.IPv4Address('192.168.0.0').is_private)
        self.assertTrue(eip.IPv4Address('192.168.255.255').is_private)
        self.assertFalse(eip.IPv4Address('192.169.0.0').is_private)

    def test_ipv4address_is_global(self):
        """Test the IPv4Address.is_global method."""
        self.assertTrue(eip.IPv4Address('9.255.255.255').is_global)
        self.assertFalse(eip.IPv4Address('10.0.0.0').is_global)
        self.assertFalse(eip.IPv4Address('10.255.255.255').is_global)
        self.assertTrue(eip.IPv4Address('11.0.0.0').is_global)
        self.assertFalse(eip.IPv4Address('100.64.0.0').is_global)
        self.assertFalse(eip.IPv4Address('100.64.255.255').is_global)
        self.assertTrue(eip.IPv4Address('172.15.255.255').is_global)
        self.assertFalse(eip.IPv4Address('172.16.0.0').is_global)
        self.assertFalse(eip.IPv4Address('172.31.255.255').is_global)
        self.assertTrue(eip.IPv4Address('172.32.0.0').is_global)
        self.assertTrue(eip.IPv4Address('192.167.255.255').is_global)
        self.assertFalse(eip.IPv4Address('192.168.0.0').is_global)
        self.assertFalse(eip.IPv4Address('192.168.255.255').is_global)
        self.assertTrue(eip.IPv4Address('192.169.0.0').is_global)

    def test_ipv4address_is_multicast(self):
        """Test the IPv4Address.is_multicast method."""
        self.assertFalse(eip.IPv4Address('223.255.255.255').is_multicast)
        self.assertTrue(eip.IPv4Address('224.0.0.0').is_multicast)
        self.assertTrue(eip.IPv4Address('239.255.255.255').is_multicast)
        self.assertFalse(eip.IPv4Address('240.0.0.0').is_multicast)

    def test_ipv4address_is_unspecified(self):
        """Test the IPv4Address.is_unspecified method."""
        self.assertFalse(eip.IPv4Address('255.255.255.255').is_unspecified)
        self.assertTrue(eip.IPv4Address('0.0.0.0').is_unspecified)
        self.assertFalse(eip.IPv4Address('0.0.0.1').is_unspecified)

    def test_ipv4address_is_loopback(self):
        """Test the IPv4Address.is_loopback method."""
        self.assertFalse(eip.IPv4Address('126.255.255.255').is_loopback)
        self.assertTrue(eip.IPv4Address('127.0.0.0').is_loopback)
        self.assertTrue(eip.IPv4Address('127.0.0.255').is_loopback)
        self.assertFalse(eip.IPv4Address('128.0.0.0').is_loopback)

    def test_ipv4address_is_link_local(self):
        """Test the IPv4Address.is_link_local method."""
        self.assertFalse(eip.IPv4Address('169.253.255.255').is_link_local)
        self.assertTrue(eip.IPv4Address('169.254.0.0').is_link_local)
        self.assertTrue(eip.IPv4Address('169.254.255.255').is_link_local)
        self.assertFalse(eip.IPv4Address('169.255.0.0').is_link_local)

    def test_ipv4address_reverse_pointer(self):
        """Test the IPv4Address.reverse_pointer method."""
        data = [
            (eip.IPv4Address('1.2.3.4'), '4.3.2.1.in-addr.arpa'),
            (eip.IPv4Address('127.0.0.1'), '1.0.0.127.in-addr.arpa')
        ]
        for addr, expect in data:
            self.assertEqual(addr.reverse_pointer, expect)

    def test_ipv4address_reduce(self):
        """Test the IPv4Address.reduce method."""
        data = [
            eip.IPv4Address('1.2.3.4'),
            eip.IPv4Address('127.0.0.1'),
        ]
        for addr in data:
            _class, args = addr.__reduce__()
            got = _class(*args)
            self.assertEqual(got, addr)

    def test_packed(self):
        """Test the ipv?Address.packed method."""
        data4 = [0, 1, 255, 256, 511, 512, 32767, 32768, 65535]
        for ip in data4:
            addr = eip.IPv4Address(ip)
            self.assertEqual(addr.packed, ip.to_bytes(4, 'big'))
        data6 = [0, 1, 65535, 65536, 2**120 - 1, 2**120, 2**128 - 1]
        for ip in data6:
            addr = eip.IPv6Address(ip)
            self.assertEqual(addr.packed, ip.to_bytes(16, 'big'))

    # =========================================================================
    # class IPv6Address methods
    # =========================================================================

    def test_ipv6address_init(self):
        """Test the IPv6Address.__init__ method."""
        i = (1 << 24) + (2 << 16) + (3 << 8) + 4
        values = [
            ('::', 0),
            (0, 0),
            ('1::', 2**112),
            (999, 999),
            ('3::4:5:6', (3 * 2**112) + (4 << 32) + (5 << 16) + 6),
            (i, i),
            (i.to_bytes(16, 'big'), i),
        ]
        for address, ip in values:
            addr = eip.IPv6Address(address)
            self.assertEqual(int(addr), ip)
            self.assertEqual(addr.version, 6)
        # Bad IP addresses
        def fn(val):
            return eip.IPv6Address(val)
        self.assertRaises(eip.AddressValueError, fn, '1:2:3:4:5')
        self.assertRaises(eip.AddressValueError, fn, -1)
        self.assertRaises(eip.AddressValueError, fn, 2**128)
        self.assertRaises(eip.AddressValueError, fn, 1.0)

    def test_ipv6address_int(self):
        """Test the BaseIPAddress.int method."""
        addr = eip.IPv6Address('::')
        self.assertEqual(addr.__int__(), 0)
        addr = eip.IPv6Address('2::')
        self.assertEqual(addr.__int__(), 2 * 2**112)
        addr = eip.IPv6Address('ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff')
        self.assertEqual(addr.__int__(), 2**128 - 1)

    def test_ipv6address_str(self):
        """Test the BaseIPAddress.str method."""
        addr = eip.IPv6Address('::')
        self.assertEqual(addr.__str__(), '::')
        addr = eip.IPv6Address('2::')
        self.assertEqual(addr.__str__(), '2::')
        addr = eip.IPv6Address('ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff')
        self.assertEqual(addr.__str__(),
                         'ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff')

    def test_ipv6address_repr(self):
        """Test the BaseIPAddress.repr method."""
        addr = eip.IPv6Address('::')
        self.assertEqual(addr.__repr__(), "IPv6Address('::')")
        addr = eip.IPv6Address('2::')
        self.assertEqual(addr.__repr__(), "IPv6Address('2::')")
        addr = eip.IPv6Address('ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff')
        self.assertEqual(addr.__repr__(),
                "IPv6Address('ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff')")

    def test_ipv6address_compressed(self):
        """Test the BaseIPAddress.compressed method."""
        addr = eip.IPv6Address('::')
        self.assertEqual(addr.compressed, '::')
        addr = eip.IPv6Address('2::')
        self.assertEqual(addr.compressed, '2::')
        addr = eip.IPv6Address('ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff')
        self.assertEqual(addr.compressed,
                         'ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff')

    def test_ipv6address_exploded(self):
        """Test the BaseIPAddress.exploded method."""
        addr = eip.IPv6Address('::')
        self.assertEqual(addr.exploded,
                         '0000:0000:0000:0000:0000:0000:0000:0000')
        addr = eip.IPv6Address('2::%3')
        self.assertEqual(addr.exploded,
                         '0002:0000:0000:0000:0000:0000:0000:0000%3')
        addr = eip.IPv6Address('ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff')
        self.assertEqual(addr.exploded,
                         'ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff')

    def test_ipv6address_eq(self):
        """Test the BaseIPAddress.__eq__ method."""
        addr1 = eip.IPv6Address('::1:0')
        addr1a = eip.IPv6Address('::1:0')
        addr1s = eip.IPv6Address('::1:0%9')
        addr2 = eip.IPv6Address('::2:0')
        self.assertTrue(addr1.__eq__(addr1))
        self.assertTrue(addr1.__eq__(addr1a))
        self.assertFalse(addr1.__eq__(addr1s))
        self.assertTrue(addr1s.__eq__(addr1s))
        self.assertFalse(addr1.__eq__(addr2))
        self.assertFalse(addr2.__eq__(addr1))
        self.assertEqual(addr1.__eq__(7), NotImplemented)
        net = addr1._network_class(addr1._ip)
        self.assertEqual(addr1.__eq__(net), NotImplemented)

    def test_ipv6address_ne(self):
        """Test the BaseIPAddress.__ne__ method."""
        addr1 = eip.IPv6Address('::1:0')
        addr1a = eip.IPv6Address('::1:0')
        addr1s = eip.IPv6Address('::1:0%9')
        addr2 = eip.IPv6Address('::2:0')
        self.assertFalse(addr1.__ne__(addr1))
        self.assertFalse(addr1.__ne__(addr1a))
        self.assertTrue(addr1.__ne__(addr1s))
        self.assertFalse(addr1s.__ne__(addr1s))
        self.assertTrue(addr1.__ne__(addr2))
        self.assertTrue(addr2.__ne__(addr1))
        self.assertEqual(addr1.__ne__(7), NotImplemented)
        net = addr1._network_class(addr1._ip)
        self.assertEqual(addr1.__ne__(net), NotImplemented)

    def test_ipv6address_lt(self):
        """Test the BaseIPAddress.__lt__ method."""
        addr1 = eip.IPv6Address('::1:0')
        addr1a = eip.IPv6Address('::1:0')
        addr1s = eip.IPv6Address('::1:0%9')
        addr2 = eip.IPv6Address('::2:0')
        self.assertFalse(addr1.__lt__(addr1))
        self.assertFalse(addr1.__lt__(addr1a))
        self.assertTrue(addr1.__lt__(addr1s))
        self.assertFalse(addr1s.__lt__(addr1))
        self.assertFalse(addr1s.__lt__(addr1s))
        self.assertTrue(addr1.__lt__(addr2))
        self.assertFalse(addr2.__lt__(addr1))
        self.assertEqual(addr1.__lt__(7), NotImplemented)
        net = addr1._network_class(addr1._ip)
        self.assertEqual(addr1.__lt__(net), NotImplemented)

    def test_ipv6address_le(self):
        """Test the BaseIPAddress.__le__ method."""
        addr1 = eip.IPv6Address('::1:0')
        addr1a = eip.IPv6Address('::1:0')
        addr1s = eip.IPv6Address('::1:0%9')
        addr2 = eip.IPv6Address('::2:0')
        self.assertTrue(addr1.__le__(addr1))
        self.assertTrue(addr1.__le__(addr1a))
        self.assertTrue(addr1.__le__(addr1s))
        self.assertFalse(addr1s.__le__(addr1))
        self.assertTrue(addr1s.__le__(addr1s))
        self.assertTrue(addr1.__le__(addr2))
        self.assertFalse(addr2.__le__(addr1))
        self.assertEqual(addr1.__le__(7), NotImplemented)
        net = addr1._network_class(addr1._ip)
        self.assertEqual(addr1.__le__(net), NotImplemented)

    def test_ipv6address_gt(self):
        """Test the BaseIPAddress.__gt__ method."""
        addr1 = eip.IPv6Address('::1:0')
        addr1a = eip.IPv6Address('::1:0')
        addr1s = eip.IPv6Address('::1:0%9')
        addr2 = eip.IPv6Address('::2:0')
        self.assertFalse(addr1.__gt__(addr1))
        self.assertFalse(addr1.__gt__(addr1a))
        self.assertFalse(addr1.__gt__(addr1s))
        self.assertTrue(addr1s.__gt__(addr1))
        self.assertFalse(addr1s.__gt__(addr1s))
        self.assertFalse(addr1.__gt__(addr2))
        self.assertTrue(addr2.__gt__(addr1))
        self.assertEqual(addr1.__gt__(7), NotImplemented)
        net = addr1._network_class(addr1._ip)
        self.assertEqual(addr1.__gt__(net), NotImplemented)

    def test_ipv6address_ge(self):
        """Test the BaseIPAddress.__ge__ method."""
        addr1 = eip.IPv6Address('::1:0')
        addr1a = eip.IPv6Address('::1:0')
        addr1s = eip.IPv6Address('::1:0%9')
        addr2 = eip.IPv6Address('::2:0')
        self.assertTrue(addr1.__ge__(addr1))
        self.assertTrue(addr1.__ge__(addr1a))
        self.assertFalse(addr1.__ge__(addr1s))
        self.assertTrue(addr1s.__ge__(addr1))
        self.assertTrue(addr1s.__ge__(addr1s))
        self.assertFalse(addr1.__ge__(addr2))
        self.assertTrue(addr2.__ge__(addr1))
        self.assertEqual(addr1.__ge__(7), NotImplemented)
        net = addr1._network_class(addr1._ip)
        self.assertEqual(addr1.__ge__(net), NotImplemented)

    def test_ipv6address_add(self):
        """Test the BaseIPAddress.__add__ method."""
        addr1 = eip.IPv6Address('::100')
        addr2 = eip.IPv6Address('::200')
        addr3 = eip.IPv6Address('::fe')
        self.assertEqual(addr1 + 256, addr2)
        self.assertEqual(addr2 + -256, addr1)
        self.assertEqual(addr3 + 2, addr1)
        self.assertEqual(addr1 + -2, addr3)
        # exceptions
        def fn(addr, other):
            return addr + other
        self.assertRaises(TypeError, fn, addr1, 1.0)

    def test_ipv6address_sub(self):
        """Test the BaseIPAddress.__sub__ method."""
        addr1 = eip.IPv6Address('::100')
        addr2 = eip.IPv6Address('::200')
        addr3 = eip.IPv6Address('::fe')
        self.assertEqual(addr2 - 256, addr1)
        self.assertEqual(addr1 - -256, addr2)
        self.assertEqual(addr1 - 2, addr3)
        self.assertEqual(addr3 - -2, addr1)
        # exceptions
        def fn(addr, other):
            return addr - other
        self.assertRaises(TypeError, fn, addr1, 1.0)

    def test_ipv6address_is_reserved(self):
        """Test the IPv6Address.is_reserved method."""
        reserved = (eip.IPv6Network('::/8'),
                    eip.IPv6Network('100::/8'),
                    eip.IPv6Network('200::/7'),
                    eip.IPv6Network('400::/6'),
                    eip.IPv6Network('800::/5'),
                    eip.IPv6Network('1000::/4'),
                    eip.IPv6Network('4000::/3'),
                    eip.IPv6Network('6000::/3'),
                    eip.IPv6Network('8000::/3'),
                    eip.IPv6Network('A000::/3'),
                    eip.IPv6Network('C000::/3'),
                    eip.IPv6Network('E000::/4'),
                    eip.IPv6Network('F000::/5'),
                    eip.IPv6Network('F800::/6'),
                    eip.IPv6Network('FE00::/9'))
        for net in reserved:
            for addr in net.network_address, net.broadcast_address:
                self.assertTrue(addr.is_reserved, '%s - %s' % (net, addr))
        unreserved = (eip.IPv6Network('2000::/8'),)
        for net in unreserved:
            for addr in net.network_address, net.broadcast_address:
                self.assertFalse(addr.is_reserved, '%s - %s' % (net, addr))

    def test_ipv6address_is_private(self):
        """Test the IPv6Address.is_private method."""
        self.assertFalse(eip.IPv6Address(
            'fbff:ffff:ffff:ffff:ffff:ffff:ffff:ffff').is_private)
        self.assertTrue(eip.IPv6Address('fc00::').is_private)
        self.assertTrue(eip.IPv6Address(
            'fdff:ffff:ffff:ffff:ffff:ffff:ffff:ffff').is_private)
        self.assertFalse(eip.IPv6Address('fe00::').is_private)

    def test_ipv6address_is_global(self):
        """Test the IPv6Address.is_global method."""
        self.assertTrue(eip.IPv6Address(
            'fbff:ffff:ffff:ffff:ffff:ffff:ffff:ffff').is_global)
        self.assertFalse(eip.IPv6Address('fc00::').is_global)
        self.assertFalse(eip.IPv6Address(
            'fdff:ffff:ffff:ffff:ffff:ffff:ffff:ffff').is_global)
        self.assertTrue(eip.IPv6Address('fe00::').is_global)

    def test_ipv6address_is_multicast(self):
        """Test the IPv6Address.is_multicast method."""
        self.assertFalse(eip.IPv6Address(
            'feff:ffff:ffff:ffff:ffff:ffff:ffff:ffff').is_multicast)
        self.assertTrue(eip.IPv6Address('ff00::').is_multicast)
        self.assertTrue(eip.IPv6Address(
            'ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff').is_multicast)

    def test_ipv6address_is_unspecified(self):
        """Test the IPv6Address.is_unspecified method."""
        self.assertTrue(eip.IPv6Address('::').is_unspecified)
        self.assertFalse(eip.IPv6Address('::1').is_unspecified)

    def test_ipv6address_is_loopback(self):
        """Test the IPv6Address.is_loopback method."""
        self.assertTrue(eip.IPv6Address('::1').is_loopback)
        self.assertFalse(eip.IPv6Address('::').is_loopback)
        self.assertFalse(eip.IPv6Address('::2').is_loopback)

    def test_ipv6address_is_link_local(self):
        """Test the IPv6Address.is_link_local method."""
        self.assertFalse(eip.IPv6Address(
            'fe7f:ffff:ffff:ffff:ffff:ffff:ffff:ffff').is_link_local)
        self.assertTrue(eip.IPv6Address('fe80::').is_link_local)
        self.assertTrue(eip.IPv6Address(
            'febf:ffff:ffff:ffff:ffff:ffff:ffff:ffff').is_link_local)
        self.assertFalse(eip.IPv6Address('fec0::').is_link_local)

    def test_ipv6address_is_site_local(self):
        """Test the IPv6Address.is_site_local method."""
        self.assertFalse(eip.IPv6Address(
            'febf:ffff:ffff:ffff:ffff:ffff:ffff:ffff').is_site_local)
        self.assertTrue(eip.IPv6Address('fec0::').is_site_local)
        self.assertTrue(eip.IPv6Address(
            'fedf:ffff:ffff:ffff:ffff:ffff:ffff:ffff').is_site_local)

    def test_ipv6address_ipv4_mapped(self):
        """Test the IPv6Address.ipv4_mapped method."""
        addr = eip.IPv6Address('::fffe:ffff:ffff')
        self.assertEqual(addr.ipv4_mapped, None)
        addr = eip.IPv6Address('::ffff:0:0')
        self.assertEqual(addr.ipv4_mapped, eip.IPv4Address('0.0.0.0'))
        addr = eip.IPv6Address('::ffff:ffff:ffff')
        self.assertEqual(addr.ipv4_mapped,
                         eip.IPv4Address('255.255.255.255'))
        addr = eip.IPv6Address('::1:0:0:0')
        self.assertEqual(addr.ipv4_mapped, None)

    def test_ipv6address_teredo(self):
        """Test the IPv6Address.teredo method."""
        addr = eip.IPv6Address('2000:ffff:ffff:ffff:ffff:ffff:ffff:ffff')
        self.assertEqual(addr.teredo, None)
        addr = eip.IPv6Address('2001:0000::')
        self.assertEqual(addr.teredo, (eip.IPv4Address('0.0.0.0'),
                                       eip.IPv4Address('0.0.0.0')))
        addr = eip.IPv6Address('2001:0000:0000:0001:0000:0000:0000:0002')
        self.assertEqual(addr.teredo, (eip.IPv4Address('0.0.0.1'),
                                       eip.IPv4Address('0.0.0.2')))
        addr = eip.IPv6Address('2001:0000:ffff:ffff:0000:0000:ffff:ffff')
        self.assertEqual(addr.teredo, (eip.IPv4Address('255.255.255.255'),
                                       eip.IPv4Address('255.255.255.255')))
        addr = eip.IPv6Address('2001:0001::')
        self.assertEqual(addr.teredo, None)

    def test_ipv6address_sixtofour(self):
        """Test the IPv6Address.sixtofour method."""
        addr = eip.IPv6Address('2001:ffff:ffff:ffff:ffff:ffff:ffff:ffff')
        self.assertEqual(addr.sixtofour, None)
        addr = eip.IPv6Address('2002:0000:0000:0000:0000:0000:0000:0000')
        self.assertEqual(addr.sixtofour, eip.IPv4Address('0.0.0.0'))
        addr = eip.IPv6Address('2002:ffff:ffff:0000:0000:0000:0000:0000')
        self.assertEqual(addr.sixtofour, eip.IPv4Address('255.255.255.255'))
        addr = eip.IPv6Address('2003:0000:0000:0000:0000:0000:0000:0000')
        self.assertEqual(addr.sixtofour, None)

    def test_ipv6address_reverse_pointer(self):
        """Test the IPv6Address.reverse_pointer method."""
        data = [
            (eip.IPv6Address('1:2:3:4:5:6:7:8'),
             '8.0.0.0.7.0.0.0.6.0.0.0.5.0.0.0.'
             '4.0.0.0.3.0.0.0.2.0.0.0.1.0.0.0.ip6.arpa'),
        ]
        for addr, expect in data:
            self.assertEqual(addr.reverse_pointer, expect)

    def test_ipv6address_reduce(self):
        """Test the IPv6Address.reduce method."""
        data = [
            eip.IPv6Address('::'),
            eip.IPv6Address('2001::2:4'),
        ]
        for addr in data:
            _class, args = addr.__reduce__()
            got = _class(*args)
            self.assertEqual(got, addr)

    # =========================================================================
    # ip_address factory function
    # =========================================================================

    def test_ip_address(self):
        """Test the ip_address function."""
        # IPv4 addresses
        addr = eip.ip_address('0.0.0.0')
        self.assertEqual(int(addr), 0)
        self.assertEqual(addr.version, 4)
        addr = eip.ip_address('1.0.0.0')
        self.assertEqual(int(addr), 2**24)
        self.assertEqual(addr.version, 4)
        addr = eip.ip_address(0)
        self.assertEqual(int(addr), 0)
        self.assertEqual(addr.version, 4)
        addr = eip.ip_address(999)
        self.assertEqual(int(addr), 999)
        self.assertEqual(addr.version, 4)
        # IPv6 addresses
        addr = eip.ip_address('::')
        self.assertEqual(int(addr), 0)
        self.assertEqual(addr.version, 6)
        addr = eip.ip_address('1::')
        self.assertEqual(int(addr), 2**112)
        self.assertEqual(addr.version, 6)
        addr = eip.ip_address(2**32)
        self.assertEqual(int(addr), 2**32)
        self.assertEqual(addr.version, 6)
        # Bad IP addresses
        fn = eip.ip_address
        self.assertRaises(eip.AddressValueError, fn, '1.2.3.4.5')
        self.assertRaises(eip.AddressValueError, fn, '1:2:3:4:5')
        self.assertRaises(eip.AddressValueError, fn, -1)
        self.assertRaises(eip.AddressValueError, fn, 2**128)
        self.assertRaises(eip.AddressValueError, fn, 1.0)

    # =========================================================================
    # IP network string to/from integeger and prefix length convesion functions
    # =========================================================================

    def test_prefix_from_string(self):
        """Test the IPv?Network._prefix_from_string function."""
        # IPv4 string netmasks
        fn = eip.IPv4Network._prefix_from_string
        self.assertEqual(fn('0.0.0.0'), 0)
        self.assertEqual(fn('128.0.0.0'), 1)
        self.assertEqual(fn('192.0.0.0'), 2)
        self.assertEqual(fn('224.0.0.0'), 3)
        self.assertEqual(fn('240.0.0.0'), 4)
        self.assertEqual(fn('248.0.0.0'), 5)
        self.assertEqual(fn('252.0.0.0'), 6)
        self.assertEqual(fn('254.0.0.0'), 7)
        self.assertEqual(fn('255.0.0.0'), 8)
        self.assertEqual(fn('255.128.0.0'), 9)
        self.assertEqual(fn('255.255.0.0'), 16)
        self.assertEqual(fn('255.255.128.0'), 17)
        self.assertEqual(fn('255.255.255.0'), 24)
        self.assertEqual(fn('255.255.255.128'), 25)
        self.assertEqual(fn('255.255.255.255'), 32)
        # bad string netmasks
        self.assertRaises(eip.NetmaskValueError, fn, '0.1.0.0')
        self.assertRaises(eip.NetmaskValueError, fn, '1.1.0.0')
        self.assertRaises(eip.NetmaskValueError, fn, ' 0.0.0.0')
        self.assertRaises(eip.NetmaskValueError, fn, '333.0.0.0')
        # IPv6 string netmasks
        fn = eip.IPv6Network._prefix_from_string
        self.assertEqual(fn('::'), 0)
        self.assertEqual(fn('8000::'), 1)
        self.assertEqual(fn('ff00::'), 8)
        self.assertEqual(fn('fff0::'), 12)
        self.assertEqual(fn('ffff::'), 16)
        # bad string netmasks
        self.assertRaises(eip.NetmaskValueError, fn, '1::')
        self.assertRaises(eip.NetmaskValueError, fn, 'ffff:1::')
        self.assertRaises(eip.NetmaskValueError, fn, ':: ')
        self.assertRaises(eip.NetmaskValueError, fn, '::abcde')

    def test_ipv4_network_to_string(self):
        """Test the IPv4Network.to_string function."""
        fn = eip.IPv4Network.to_string
        # Good IP addresses and their integer values
        self.assertEqual(fn(256, 24), '0.0.1.0/24')
        self.assertEqual(fn(257, 0), '0.0.1.1/0')
        # Bad IP addresses
        exc = eip.AddressValueError
        self.assertRaises(exc, fn, -1, 16)
        self.assertRaises(exc, fn, 2**32, 32)
        exc = eip.NetmaskValueError
        self.assertRaises(exc, fn, 2**31, 33)
        self.assertRaises(exc, fn, 999, -1)

    def test_ipv6_network_to_string(self):
        """Test the IPv6Network.to_string function."""
        # Good IP addresses and their integer values
        fn = eip.IPv6Network.to_string
        self.assertEqual(fn(65536, 24), '::1:0/24')
        self.assertEqual(fn(65537, 0), '::1:1/0')
        # Bad IP addresses
        exc = eip.AddressValueError
        self.assertRaises(exc, fn, -1, 16)
        self.assertRaises(exc, fn, 2**128, 12)
        exc = eip.NetmaskValueError
        self.assertRaises(exc, fn, 2**128 - 1, 129)
        self.assertRaises(exc, fn, 2**127, 129)
        self.assertRaises(exc, fn, 999, -1)

    def test_ipv6_network_to_string_exploded(self):
        """Test the IPv6Network.to_string function."""
        # Good IP addresses and their integer values
        fn = eip.IPv6Network.to_string_exploded
        self.assertEqual(fn(65536, 24),
                         '0000:0000:0000:0000:0000:0000:0001:0000/24')
        self.assertEqual(fn(65537, 0),
                         '0000:0000:0000:0000:0000:0000:0001:0001/0')
        # Bad IP addresses
        exc = eip.AddressValueError
        self.assertRaises(exc, fn, -1, 16)
        self.assertRaises(exc, fn, 2**128, 12)
        self.assertRaises(exc, fn, -1, 16)
        self.assertRaises(exc, fn, 2**128, 12)
        exc = eip.NetmaskValueError
        self.assertRaises(exc, fn, 2**128 - 1, 129)
        self.assertRaises(exc, fn, 2**127, 129)
        self.assertRaises(exc, fn, 999, -1)

    # =========================================================================
    # class IPv4Network methods
    # =========================================================================

    def test_ipv4network_init(self):
        """Test the IPv4Network.__init__ method."""
        # address, strict, ip, prefixlen
        values = [
            ('0.0.0.0/16', False, 0, 16),
            ('1.0.0.0/16', False, 2**24, 16),
            (('1.0.0.0', '16'), False, 2**24, 16),
            ('255.255.255.255/31', False, 2**32 - 2, 31),
            ((0, 24), False, 0, 24),
            ((999, 24), False, 999 & 0xffffff00, 24),
            (int(9).to_bytes(4, 'big'), False, 9, 32),
        ]
        for address, strict, ip, prefixlen in values:
            net = eip.IPv4Network(address, strict)
            self.assertEqual(int(net.network_address), ip)
            self.assertEqual(net.prefixlen, prefixlen)
            self.assertEqual(net.version, 4)
        # Bad IP addresses
        def fn(*args):
            return eip.IPv4Network(*args)
        self.assertRaises(eip.AddressValueError, fn, '1.2.3.4.5/32')
        self.assertRaises(eip.NetmaskValueError, fn, '1.2.3.4/33')
        self.assertRaises(eip.AddressValueError, fn, (-1, 22))
        self.assertRaises(eip.AddressValueError, fn, (2**32, 0))
        self.assertRaises(eip.NetmaskValueError, fn, (1, -1))
        self.assertRaises(eip.NetmaskValueError, fn, (1, 33))
        self.assertRaises(eip.AddressValueError, fn, (1.0, 8))

    def test_ipv4network_str(self):
        """Test the BaseIPNetwork.str method."""
        net = eip.IPv4Network('0.0.0.0/5')
        self.assertEqual(net.__str__(), '0.0.0.0/5')
        net = eip.IPv4Network('2.0.0.0/8')
        self.assertEqual(net.__str__(), '2.0.0.0/8')
        net = eip.IPv4Network('255.255.255.255')
        self.assertEqual(net.__str__(), '255.255.255.255/32')

    def test_ipv4network_repr(self):
        """Test the BaseIPNetwork.repr method."""
        net = eip.IPv4Network('0.0.0.0/5')
        self.assertEqual(net.__repr__(), "IPv4Network('0.0.0.0/5')")
        net = eip.IPv4Network('2.0.0.0/8')
        self.assertEqual(net.__repr__(), "IPv4Network('2.0.0.0/8')")
        net = eip.IPv4Network('255.255.255.255')
        self.assertEqual(net.__repr__(), "IPv4Network('255.255.255.255/32')")

    def test_ipv4network_compressed(self):
        """Test the BaseIPNetwork.compressed method."""
        net = eip.IPv4Network('0.0.0.0/5')
        self.assertEqual(net.compressed, '0.0.0.0/5')
        net = eip.IPv4Network('2.0.0.0/8')
        self.assertEqual(net.compressed, '2.0.0.0/8')
        net = eip.IPv4Network('255.255.255.255')
        self.assertEqual(net.compressed, '255.255.255.255/32')

    def test_ipv4network_exploded(self):
        """Test the BaseIPNetwork.exploded method."""
        net = eip.IPv4Network('0.0.0.0/5')
        self.assertEqual(net.exploded, '0.0.0.0/5')
        net = eip.IPv4Network('2.0.0.0/8')
        self.assertEqual(net.exploded, '2.0.0.0/8')
        net = eip.IPv4Network('255.255.255.255')
        self.assertEqual(net.exploded, '255.255.255.255/32')

    def test_ipv4network_compare_networks(self):
        """Test the BaseIPNetwork.compare_networks method."""
        net1 = eip.IPv4Network('0.1.0.0/16')
        net1a = eip.IPv4Network('0.1.0.0/16')
        net2 = eip.IPv4Network('0.1.0.0/24')
        net3 = eip.IPv4Network('0.2.2.0')
        self.assertEqual(net1.compare_networks(net1), 0)
        self.assertEqual(net1.compare_networks(net1a), 0)
        self.assertEqual(net1.compare_networks(net2), 1)
        self.assertEqual(net1.compare_networks(net3), -1)
        self.assertEqual(net3.compare_networks(net1), 1)
        def fn(obj, other):
            return obj.compare_networks(other)
        self.assertRaises(TypeError, fn, net1, 13)

    def test_ipv4network_eq(self):
        """Test the BaseIPNetwork.__eq__ method."""
        net1 = eip.IPv4Network('0.1.0.0/16')
        net1a = eip.IPv4Network('0.1.0.0/16')
        net2 = eip.IPv4Network('0.1.0.0/24')
        net3 = eip.IPv4Network('0.2.0.0')
        self.assertTrue(net1.__eq__(net1))
        self.assertTrue(net1.__eq__(net1a))
        self.assertFalse(net1.__eq__(net2))
        self.assertFalse(net1.__eq__(net3))
        self.assertFalse(net3.__eq__(net1))
        self.assertEqual(net1.__eq__(13), NotImplemented)

    def test_ipv4network_ne(self):
        """Test the BaseIPNetwork.__ne__ method."""
        net1 = eip.IPv4Network('0.1.0.0/16')
        net1a = eip.IPv4Network('0.1.0.0/16')
        net2 = eip.IPv4Network('0.1.0.0/24')
        net3 = eip.IPv4Network('0.2.0.0')
        self.assertFalse(net1.__ne__(net1))
        self.assertFalse(net1.__ne__(net1a))
        self.assertTrue(net1.__ne__(net2))
        self.assertTrue(net1.__ne__(net3))
        self.assertTrue(net3.__ne__(net1))
        self.assertEqual(net1.__ne__(13), NotImplemented)

    def test_ipv4network_lt(self):
        """Test the BaseIPNetwork.__lt__ method."""
        net1 = eip.IPv4Network('0.1.0.0/16')
        net1a = eip.IPv4Network('0.1.0.0/16')
        net2 = eip.IPv4Network('0.1.0.0/24')
        net3 = eip.IPv4Network('0.2.0.0')
        self.assertFalse(net1.__lt__(net1))
        self.assertFalse(net1.__lt__(net1a))
        self.assertFalse(net1.__lt__(net2))
        self.assertTrue(net1.__lt__(net3))
        self.assertFalse(net3.__lt__(net1))
        self.assertEqual(net1.__lt__(13), NotImplemented)

    def test_ipv4network_le(self):
        """Test the BaseIPNetwork.__le__ method."""
        net1 = eip.IPv4Network('0.1.0.0/16')
        net1a = eip.IPv4Network('0.1.0.0/16')
        net2 = eip.IPv4Network('0.1.0.0/24')
        net3 = eip.IPv4Network('0.2.0.0')
        self.assertTrue(net1.__le__(net1))
        self.assertTrue(net1.__le__(net1a))
        self.assertFalse(net1.__le__(net2))
        self.assertTrue(net1.__le__(net3))
        self.assertFalse(net3.__le__(net1))
        self.assertEqual(net1.__le__(13), NotImplemented)

    def test_ipv4network_gt(self):
        """Test the BaseIPNetwork.__gt__ method."""
        net1 = eip.IPv4Network('0.1.0.0/16')
        net1a = eip.IPv4Network('0.1.0.0/16')
        net2 = eip.IPv4Network('0.1.0.0/24')
        net3 = eip.IPv4Network('0.2.0.0')
        self.assertFalse(net1.__gt__(net1))
        self.assertFalse(net1.__gt__(net1a))
        self.assertTrue(net1.__gt__(net2))
        self.assertFalse(net1.__gt__(net3))
        self.assertTrue(net3.__gt__(net1))
        self.assertEqual(net1.__gt__(13), NotImplemented)

    def test_ipv4network_ge(self):
        """Test the BaseIPNetwork.__ge__ method."""
        net1 = eip.IPv4Network('0.1.0.0/16')
        net1a = eip.IPv4Network('0.1.0.0/16')
        net2 = eip.IPv4Network('0.1.0.0/24')
        net3 = eip.IPv4Network('0.2.0.0')
        self.assertTrue(net1.__ge__(net1))
        self.assertTrue(net1.__ge__(net1a))
        self.assertTrue(net1.__ge__(net2))
        self.assertFalse(net1.__ge__(net3))
        self.assertTrue(net3.__ge__(net1))
        self.assertEqual(net1.__ge__(13), NotImplemented)

    def test_network_hash(self):
        """Test the BaseIPNetwork.hash method."""
        # IPv4
        net1 = eip.IPv4Network('1.1.0.0/16')
        net2 = eip.IPv4Network('0.0.2.0')
        self.assertNotEqual(net1.__hash__(), net2.__hash__())
        # IPv6
        net1 = eip.IPv6Network('1::/112')
        net2 = eip.IPv6Network('::2:0')
        self.assertNotEqual(net1.__hash__(), net2.__hash__())

    def test_ipv4network_len(self):
        """Test the BaseIPNetwork.len method."""
        for i in range(33):
            net = eip.IPv4Network((0, i))
            self.assertEqual(len(net), 2**(32 - i))

    def test_ipv4network_network_address(self):
        """Test the BaseIPNetwork.network_address method."""
        for nethost in range(256):
            net = eip.IPv4Network((1024 + nethost, 24), False)
            self.assertEqual(net.network_address, eip.IPv4Address(1024))

    def test_ipv4network_hostmask(self):
        """Test the BaseIPNetwork.hostmask method."""
        for preflen in range(33):
            net = eip.IPv4Network((0, preflen))
            addr = eip.IPv4Address(2**(32 - preflen) - 1)
            self.assertEqual(net.hostmask, addr)

    def test_network_netmask(self):
        """Test the BaseIPNetwork._netmask attribute."""
        for preflen in range(33):
            net = eip.IPv4Network((0, preflen))
            self.assertEqual(net._netmask, (2**32) - (2**(32 - preflen)))
        for preflen in range(129):
            net = eip.IPv6Network((0, preflen))
            self.assertEqual(net._netmask, (2**128) - (2**(128 - preflen)))

    def test_ipv4network_netmask(self):
        """Test the BaseIPNetwork.netmask method."""
        for preflen in range(33):
            net = eip.IPv4Network((0, preflen))
            addr = eip.IPv4Address((2**32) - (2**(32 - preflen)))
            self.assertEqual(net.netmask, addr)

    def test_ipv4network_with_prefixlen(self):
        """Test the BaseIPNetwork.with_prefixlen method."""
        net = eip.IPv4Network('1.2.3.0/25')
        self.assertEqual(net.with_prefixlen, '1.2.3.0/25')
        net = eip.IPv4Network('2.0.0.0/8')
        self.assertEqual(net.with_prefixlen, '2.0.0.0/8')
        net = eip.IPv4Network('255.255.255.255')
        self.assertEqual(net.with_prefixlen, '255.255.255.255/32')

    def test_ipv4network_with_netmask(self):
        """Test the BaseIPNetwork.with_netmask method."""
        net = eip.IPv4Network('0.0.0.0/0')
        self.assertEqual(net.with_netmask, '0.0.0.0/0.0.0.0')
        net = eip.IPv4Network('1.0.0.0/8')
        self.assertEqual(net.with_netmask, '1.0.0.0/255.0.0.0')
        net = eip.IPv4Network('1.2.0.0/16')
        self.assertEqual(net.with_netmask, '1.2.0.0/255.255.0.0')
        net = eip.IPv4Network('1.2.3.0/24')
        self.assertEqual(net.with_netmask, '1.2.3.0/255.255.255.0')
        net = eip.IPv4Network('1.2.3.4/32')
        self.assertEqual(net.with_netmask, '1.2.3.4/255.255.255.255')

    def test_ipv4network_with_hostmask(self):
        """Test the BaseIPNetwork.with_hostmask method."""
        net = eip.IPv4Network('0.0.0.0/0')
        self.assertEqual(net.with_hostmask, '0.0.0.0/255.255.255.255')
        net = eip.IPv4Network('1.0.0.0/8')
        self.assertEqual(net.with_hostmask, '1.0.0.0/0.255.255.255')
        net = eip.IPv4Network('1.2.0.0/16')
        self.assertEqual(net.with_hostmask, '1.2.0.0/0.0.255.255')
        net = eip.IPv4Network('1.2.3.0/24')
        self.assertEqual(net.with_hostmask, '1.2.3.0/0.0.0.255')
        net = eip.IPv4Network('1.2.3.4/32')
        self.assertEqual(net.with_hostmask, '1.2.3.4/0.0.0.0')

    def test_ipv4network_getitem(self):
        """Test the BaseIPNetwork.getitem method."""
        net = eip.IPv4Network('0.0.1.0/24')
        for i in range(len(net)):
            self.assertEqual(net[i], eip.IPv4Address(256 + i))
            self.assertEqual(net[-i - 1], eip.IPv4Address(511 - i))
        def fn(net, index):
            return net[index]
        self.assertRaises(IndexError, fn, net, 256)
        self.assertRaises(IndexError, fn, net, -257)
        self.assertRaises(TypeError, fn, net, 1.0)
        self.assertRaises(TypeError, fn, net, '1')

    def test_ipv4network_iter(self):
        """Test the BaseIPNetwork.iter method."""
        net = eip.IPv4Network('0.0.2.0/24')
        baseip = 512
        count = 0
        for addr in net:
            self.assertEqual(addr, eip.IPv4Address(baseip + count))
            count += 1
        self.assertEqual(count, 256)

    def test_ipv4network_hosts(self):
        """Test the BaseIPNetwork.hosts method."""
        net = eip.IPv4Network('0.0.2.0/24')
        baseip = 512
        count = 0
        for addr in net.hosts():
            self.assertEqual(addr, eip.IPv4Address(baseip + count + 1))
            self.assertNotEqual(int(addr), baseip)
            self.assertNotEqual(int(addr), baseip + 255)
            count += 1
        self.assertEqual(count, 254)

    def test_ipv4network_subnetworks(self):
        """Test the BaseIPNetwork.subnetworks method."""
        data = (
            # baseip    preflen   diff  sublen  num_subnets
            ( 65536,    16,       0,    65536,  1),
            (   512,    24,       1,    128,    2),
            (  1024,    28,       2,    4,      4),
        )
        for baseip, preflen, diff, sublen, num_subnets in data:
            net = eip.IPv4Network((baseip, preflen))
            ip = baseip
            count = 0
            for sub in net.subnetworks(diff=diff):
                self.assertEqual(sub, eip.IPv4Network((ip, preflen + diff)),
                                 'net=%s diff=%s sub=%s' % (net, diff, sub))
                ip += sublen
                count += 1
            self.assertEqual(count, num_subnets,
                             'net=%s diff=%s sub=%s' % (net, diff, sub))
            ip = baseip
            count = 0
            for sub in net.subnetworks(preflen=preflen + diff):
                self.assertEqual(sub, eip.IPv4Network((ip, preflen + diff)),
                                 'net=%s diff=%s sub=%s' % (net, diff, sub))
                ip += sublen
                count += 1
            self.assertEqual(count, num_subnets,
                             'net=%s diff=%s sub=%s' % (net, diff, sub))
        # bad subnets
        def fn(net, diff, preflen):
            return list(net.subnetworks(diff, preflen=preflen))
        net = eip.IPv4Network((0, 24))
        self.assertRaises(ValueError, fn, net, None, None)
        self.assertRaises(ValueError, fn, net, 1, 31)
        self.assertRaises(ValueError, fn, net, -1, None)
        self.assertRaises(ValueError, fn, net, 32, None)
        self.assertRaises(ValueError, fn, net, None, -1)
        self.assertRaises(ValueError, fn, net, None, 33)

    def test_ipv4network_subnets(self):
        """Test the BaseIPNetwork.subnets method."""
        data = (
            # baseip    preflen   diff  sublen  num_subnets
            ( 65536,    16,       0,    65536,  1),
            (   512,    24,       1,    128,    2),
            (  1024,    28,       2,    4,      4),
        )
        for baseip, preflen, diff, sublen, num_subnets in data:
            net = eip.IPv4Network((baseip, preflen))
            ip = baseip
            count = 0
            for sub in net.subnets(diff):
                self.assertEqual(sub, eip.IPv4Network((ip, preflen + diff)),
                                 'net=%s diff=%s sub=%s' % (net, diff, sub))
                ip += sublen
                count += 1
            self.assertEqual(count, num_subnets,
                             'net=%s diff=%s sub=%s' % (net, diff, sub))
            ip = baseip
            count = 0
            for sub in net.subnets(new_prefix=preflen + diff):
                self.assertEqual(sub, eip.IPv4Network((ip, preflen + diff)),
                                 'net=%s diff=%s sub=%s' % (net, diff, sub))
                ip += sublen
                count += 1
            self.assertEqual(count, num_subnets,
                             'net=%s diff=%s sub=%s' % (net, diff, sub))
        # bad subnets
        def fn(net, diff, preflen):
            return list(net.subnets(diff, new_prefix=preflen))
        net = eip.IPv4Network((0, 24))
        self.assertRaises(ValueError, fn, net, 9, None)
        self.assertRaises(ValueError, fn, net, -1, None)
        self.assertRaises(ValueError, fn, net, None, 33)
        self.assertRaises(ValueError, fn, net, 2, 31)

    def test_ipv4network_supernetwork(self):
        """Test the BaseIPNetwork.supernetwork method."""
        net = eip.IPv4Network('0.0.2.0/24')
        supernet = eip.IPv4Network('0.0.2.0/23')
        self.assertEqual(net.supernetwork(1), supernet)
        self.assertEqual(net.supernetwork(preflen=23), supernet)
        supernet = eip.IPv4Network('0.0.0.0/22')
        self.assertEqual(net.supernetwork(2), supernet)
        self.assertEqual(net.supernetwork(preflen=22), supernet)
        supernet = eip.IPv4Network('0.0.0.0/21')
        self.assertEqual(net.supernetwork(3), supernet)
        self.assertEqual(net.supernetwork(preflen=21), supernet)
        # bad supernet
        def fn(net, *args, **kwargs):
            return net.supernetwork(*args, **kwargs)
        net = eip.IPv4Network('0.0.2.0/24')
        self.assertRaises(ValueError, fn, net, None, None)
        self.assertRaises(ValueError, fn, net, diff=2, preflen=26)
        net = eip.IPv4Network('0.0.0.0/0')
        self.assertRaises(ValueError, fn, net, diff=1)
        net = eip.IPv4Network('0.0.2.0/24')
        self.assertRaises(ValueError, fn, net, diff=25)
        self.assertRaises(ValueError, fn, net, diff=-1)
        self.assertRaises(ValueError, fn, net, preflen=26)
        self.assertRaises(ValueError, fn, net, preflen=33)

    def test_ipv4network_supernet(self):
        """Test the BaseIPNetwork.supernet method."""
        net = eip.IPv4Network('0.0.2.0/24')
        supernet = eip.IPv4Network('0.0.2.0/23')
        self.assertEqual(net.supernet(1), supernet)
        self.assertEqual(net.supernet(new_prefix=23), supernet)
        supernet = eip.IPv4Network('0.0.0.0/22')
        self.assertEqual(net.supernet(2), supernet)
        self.assertEqual(net.supernet(new_prefix=22), supernet)
        supernet = eip.IPv4Network('0.0.0.0/21')
        self.assertEqual(net.supernet(3), supernet)
        self.assertEqual(net.supernet(new_prefix=21), supernet)
        # no supernet
        net = eip.IPv4Network('0.0.0.0/0')
        self.assertEqual(net.supernet(1), net)
        # bad supernet
        def fn(net, *args, **kwargs):
            return net.supernet(*args, **kwargs)
        net = eip.IPv4Network('0.0.2.0/24')
        self.assertRaises(ValueError, fn, net, None, None)
        self.assertRaises(ValueError, fn, net, prefixlen_diff=2, new_prefix=26)
        self.assertRaises(ValueError, fn, net, 25, new_prefix=None)
        self.assertRaises(ValueError, fn, net, -1, new_prefix=None)
        self.assertRaises(ValueError, fn, net, None, new_prefix=26)
        self.assertRaises(ValueError, fn, net, None, new_prefix=33)
        self.assertRaises(ValueError, fn, net, None, new_prefix=-1)

    def test_ipv4network_contains(self):
        """Test the BaseIPNetwork.contains method."""
        net1 = eip.IPv4Network('0.1.0.0/16')
        net1a = eip.IPv4Network('0.1.0.0/16')
        net2 = eip.IPv4Network('0.1.0.0/24')
        net3 = eip.IPv4Network('0.2.0.0')
        addr0 = eip.IPv4Address('0.1.0.0')
        addr1 = eip.IPv4Address('0.1.0.1')
        addr2 = eip.IPv4Address('0.1.255.255')
        addr3 = eip.IPv4Address('0.2.0.0')
        self.assertTrue(net1.__contains__(net1))
        self.assertTrue(net1.__contains__(net1a))
        self.assertTrue(net1.__contains__(net2))
        self.assertFalse(net1.__contains__(net3))
        self.assertFalse(net2.__contains__(net1))
        self.assertFalse(net3.__contains__(net1))
        self.assertTrue(net1.__contains__(addr0))
        self.assertTrue(net1.__contains__(addr1))
        self.assertTrue(net1.__contains__(addr2))
        self.assertFalse(net1.__contains__(addr3))

    def test_ipv4network_overlaps(self):
        """Test the BaseIPNetwork.overlaps method."""
        net1 = eip.IPv4Network('0.1.0.0/16')
        net1a = eip.IPv4Network('0.1.0.0/16')
        net2 = eip.IPv4Network('0.1.0.0/24')
        net3 = eip.IPv4Network('0.2.0.0')
        self.assertTrue(net1.overlaps(net1))
        self.assertTrue(net1.overlaps(net1a))
        self.assertTrue(net1.overlaps(net2))
        self.assertFalse(net1.overlaps(net3))
        self.assertTrue(net2.overlaps(net1))
        self.assertFalse(net3.overlaps(net1))

    def test_ipv4network_exclude(self):
        """Test the BaseIPNetwork.exclude method."""
        def fn(net, *args, **kwargs):
            return list(net.address_exclude(*args, **kwargs))
        net = eip.IPv4Network('0.1.0.0/16')
        sub1a = eip.IPv4Network('0.1.0.0/17')
        sub1b = eip.IPv4Network('0.1.128.0/17')
        self.assertEqual(fn(net, sub1a), [sub1b])
        self.assertEqual(fn(net, sub1b), [sub1a])
        sub2a = eip.IPv4Network('0.1.0.0/18')
        sub2b = eip.IPv4Network('0.1.64.0/18')
        sub2c = eip.IPv4Network('0.1.128.0/18')
        sub2d = eip.IPv4Network('0.1.192.0/18')
        self.assertEqual(fn(net, sub2a), [sub2b, sub1b])
        self.assertEqual(fn(net, sub2b), [sub2a, sub1b])
        self.assertEqual(fn(net, sub2c), [sub1a, sub2d])
        self.assertEqual(fn(net, sub2d), [sub1a, sub2c])
        net = eip.IPv4Network('0.1.0.0/30')
        sub1a = eip.IPv4Network('0.1.0.0/31')
        sub1b = eip.IPv4Network('0.1.0.2/31')
        self.assertEqual(fn(net, sub1a), [sub1b])
        self.assertEqual(fn(net, sub1b), [sub1a])
        sub2a = eip.IPv4Network('0.1.0.0/32')
        sub2b = eip.IPv4Network('0.1.0.1/32')
        sub2c = eip.IPv4Network('0.1.0.2/32')
        sub2d = eip.IPv4Network('0.1.0.3/32')
        addr2a = eip.IPv4Network('0.1.0.0')
        addr2b = eip.IPv4Network('0.1.0.1')
        addr2c = eip.IPv4Network('0.1.0.2')
        addr2d = eip.IPv4Network('0.1.0.3')
        self.assertEqual(fn(net, addr2a), [sub2b, sub1b])
        self.assertEqual(fn(net, addr2b), [sub2a, sub1b])
        self.assertEqual(fn(net, addr2c), [sub1a, sub2d])
        self.assertEqual(fn(net, addr2d), [sub1a, sub2c])
        net = eip.IPv4Network('0.1.0.0/16')
        self.assertEqual(fn(net, net), [])
        # IPv4Network / IPv6Network
        net4 = eip.IPv4Network((65536, 16))
        net6 = eip.IPv6Network((65536, 120))
        self.assertRaises(TypeError, fn, net4, net6)

    def test_ipv4network_address_exclude(self):
        """Test the BaseIPNetwork.address_exclude method."""
        def fn(net, *args, **kwargs):
            return list(net.address_exclude(*args, **kwargs))
        net = eip.IPv4Network('0.1.0.0/16')
        sub1a = eip.IPv4Network('0.1.0.0/17')
        sub1b = eip.IPv4Network('0.1.128.0/17')
        self.assertEqual(fn(net, sub1a), [sub1b])
        self.assertEqual(fn(net, sub1b), [sub1a])
        sub2a = eip.IPv4Network('0.1.0.0/18')
        sub2b = eip.IPv4Network('0.1.64.0/18')
        sub2c = eip.IPv4Network('0.1.128.0/18')
        sub2d = eip.IPv4Network('0.1.192.0/18')
        self.assertEqual(fn(net, sub2a), [sub2b, sub1b])
        self.assertEqual(fn(net, sub2b), [sub2a, sub1b])
        self.assertEqual(fn(net, sub2c), [sub1a, sub2d])
        self.assertEqual(fn(net, sub2d), [sub1a, sub2c])
        net = eip.IPv4Network('0.1.0.0/30')
        sub1a = eip.IPv4Network('0.1.0.0/31')
        sub1b = eip.IPv4Network('0.1.0.2/31')
        self.assertEqual(fn(net, sub1a), [sub1b])
        self.assertEqual(fn(net, sub1b), [sub1a])
        sub2a = eip.IPv4Network('0.1.0.0/32')
        sub2b = eip.IPv4Network('0.1.0.1/32')
        sub2c = eip.IPv4Network('0.1.0.2/32')
        sub2d = eip.IPv4Network('0.1.0.3/32')
        addr2a = eip.IPv4Network('0.1.0.0')
        addr2b = eip.IPv4Network('0.1.0.1')
        addr2c = eip.IPv4Network('0.1.0.2')
        addr2d = eip.IPv4Network('0.1.0.3')
        self.assertEqual(fn(net, addr2a), [sub2b, sub1b])
        self.assertEqual(fn(net, addr2b), [sub2a, sub1b])
        self.assertEqual(fn(net, addr2c), [sub1a, sub2d])
        self.assertEqual(fn(net, addr2d), [sub1a, sub2c])
        # bad subnet
        # IPv4Network / IPv6Network
        net4 = eip.IPv4Network((65536, 16))
        net6 = eip.IPv6Network((65536, 120))
        self.assertRaises(TypeError, fn, net4, net6)
        # IPv6Network / IPv4Network
        net4 = eip.IPv4Network((65536, 16))
        net6 = eip.IPv6Network((1 << 120, 8))
        self.assertRaises(TypeError, fn, net6, net4)
        # IPv4Network / IPv6Address
        net4 = eip.IPv4Network((65536, 16))
        addr6 = eip.IPv6Address(16384)
        self.assertRaises(TypeError, fn, net4, addr6)
        # IPv6Network / IPv4Address
        net6 = eip.IPv6Network(16384)
        addr4 = eip.IPv4Address(65536)
        self.assertRaises(TypeError, fn, net6, addr4)
        # non contained
        net1 = eip.IPv4Network((65536, 16))
        net2 = eip.IPv4Network((1 << 24, 8))
        self.assertRaises(ValueError, fn, net1, net2)

    def test_ipv4network_broadcast_int(self):
        """Test the BaseIPNetwork._broadcast_int method."""
        for preflen in range(33):
            ip = 2**(32 - preflen) & 0xffffffff
            bip = ip | ((2**(32 - preflen)) - 1)
            net = eip.IPv4Network((ip, preflen))
            self.assertEqual(net._broadcast_int, bip)

    def test_ipv4network_broadcast_address(self):
        """Test the BaseIPNetwork.broadcast_address method."""
        for preflen in range(33):
            ip = 2**(32 - preflen) & 0xffffffff
            baddr = eip.IPv4Address(ip | ((2**(32 - preflen)) - 1))
            net = eip.IPv4Network((ip, preflen))
            self.assertEqual(net.broadcast_address, baddr)

    def test_ipv4network_reverse_pointer(self):
        """Test the IPv4Network.reverse_pointer method."""
        data = [
            (eip.IPv4Network('1.2.3.0/24'), '0/24.3.2.1.in-addr.arpa'),
            (eip.IPv4Network('5.4.3.2/31'), '2/31.3.4.5.in-addr.arpa')
        ]
        for addr, expect in data:
            self.assertEqual(addr.reverse_pointer, expect)

    def test_ipv4network_reduce(self):
        """Test the IPv4Network.reduce method."""
        data = [
            eip.IPv4Network('1.2.3.0/24'),
            eip.IPv4Network('127.0.0.1/32'),
        ]
        for addr in data:
            _class, args = addr.__reduce__()
            got = _class(*args)
            self.assertEqual(got, addr)

    def test_network_num_addresses(self):
        """Test the IPvXNetwork.num_addresses method."""
        for i in range(1, 33):
            net = eip.IPv4Network((1 << (32 - i), i))
            self.assertEqual(net.num_addresses, 2**(32 - i))
        for i in range(1, 129):
            net = eip.IPv6Network((1 << (128 - i), i))
            self.assertEqual(net.num_addresses, 2**(128 - i))

    def test_network_is_multicast(self):
        """Test the _BaseIPNetork.is_multicast method."""
        data = [
            (eip.ip_network('208.0.0.0/4'), False),
            (eip.ip_network('224.0.0.0/4'), True),
            (eip.ip_network('240.0.0.0/4'), False),
            (eip.ip_network('224.0.0.0/3'), False),
            (eip.ip_network('224.0.0.0/5'), True),
            (eip.ip_network('fe00::/8'), False),
            (eip.ip_network('ff00::/8'), True),
            (eip.ip_network('0000::/8'), False),
            (eip.ip_network('ff00::/9'), True),
            (eip.ip_network('fe00::/7'), False),
        ]
        for net, expect in data:
            self.assertEqual(net.is_multicast, expect)

    def test_network_subnet_of(self):
        """Test the BaseIPNetwork.subnet_of method."""
        # IPv4
        net1 = eip.IPv4Network('0.1.0.0/16')
        net1a = eip.IPv4Network('0.1.0.0/16')
        net2 = eip.IPv4Network('0.1.0.0/24')
        net3 = eip.IPv4Network('0.2.0.0')
        self.assertTrue(net1.subnet_of(net1))
        self.assertTrue(net1.subnet_of(net1a))
        self.assertTrue(net2.subnet_of(net1))
        self.assertFalse(net3.subnet_of(net1))
        self.assertFalse(net1.subnet_of(net2))
        self.assertFalse(net1.subnet_of(net3))
        # IPv6
        net1 = eip.IPv6Network('::1:0/112')
        net1a = eip.IPv6Network('::1:0/112')
        net2 = eip.IPv6Network('::1:0/121')
        net3 = eip.IPv6Network('::2:0:0')
        self.assertTrue(net1.subnet_of(net1))
        self.assertTrue(net1.subnet_of(net1a))
        self.assertTrue(net2.subnet_of(net1))
        self.assertFalse(net3.subnet_of(net1))
        self.assertFalse(net1.subnet_of(net2))
        self.assertFalse(net1.subnet_of(net3))

    def test_network_supernet_of(self):
        """Test the BaseIPNetwork.supernet_of method."""
        # IPv4
        net1 = eip.IPv4Network('0.1.0.0/16')
        net1a = eip.IPv4Network('0.1.0.0/16')
        net2 = eip.IPv4Network('0.1.0.0/24')
        net3 = eip.IPv4Network('0.2.0.0')
        self.assertTrue(net1.supernet_of(net1))
        self.assertTrue(net1.supernet_of(net1a))
        self.assertTrue(net1.supernet_of(net2))
        self.assertFalse(net1.supernet_of(net3))
        self.assertFalse(net2.supernet_of(net1))
        self.assertFalse(net3.supernet_of(net1))
        # IPv6
        net1 = eip.IPv6Network('::1:0/112')
        net1a = eip.IPv6Network('::1:0/112')
        net2 = eip.IPv6Network('::1:0/121')
        net3 = eip.IPv6Network('::2:0:0')
        self.assertTrue(net1.supernet_of(net1))
        self.assertTrue(net1.supernet_of(net1a))
        self.assertTrue(net1.supernet_of(net2))
        self.assertFalse(net1.supernet_of(net3))
        self.assertFalse(net2.supernet_of(net1))
        self.assertFalse(net3.supernet_of(net1))

    def test_network_is_reserved(self):
        """Test the _BaseIPNetwork.is_reserved method."""
        # IPv4
        self.assertFalse(eip.IPv4Network('239.255.255.255').is_reserved)
        self.assertTrue(eip.IPv4Network('240.0.0.0').is_reserved)
        self.assertTrue(eip.IPv4Network('255.255.255.255').is_reserved)
        # IPv6
        reserved = (eip.IPv6Network('::/8'),
                    eip.IPv6Network('100::/8'),
                    eip.IPv6Network('200::/7'),
                    eip.IPv6Network('400::/6'),
                    eip.IPv6Network('800::/5'),
                    eip.IPv6Network('1000::/4'),
                    eip.IPv6Network('4000::/3'),
                    eip.IPv6Network('6000::/3'),
                    eip.IPv6Network('8000::/3'),
                    eip.IPv6Network('A000::/3'),
                    eip.IPv6Network('C000::/3'),
                    eip.IPv6Network('E000::/4'),
                    eip.IPv6Network('F000::/5'),
                    eip.IPv6Network('F800::/6'),
                    eip.IPv6Network('FE00::/9'))
        for net in reserved:
            for addr in net.network_address, net.broadcast_address:
                net2 = eip.IPv6Network((int(addr), 112), False)
                self.assertTrue(net2.is_reserved, '%s - %s' % (net, net2))
        unreserved = (eip.IPv6Network('2000::/120'),)
        for net in unreserved:
            for addr in net.network_address, net.broadcast_address:
                net2 = eip.IPv6Network((int(addr), 4), False)
                self.assertFalse(net2.is_reserved, '%s - %s' % (net, net2))

    def test_network_is_link_local(self):
        """Test the IPv4Address.is_link_local method."""
        # IPv4
        self.assertFalse(eip.IPv4Network('169.253.255.254/31').is_link_local)
        self.assertTrue(eip.IPv4Network('169.254.0.4/31').is_link_local)
        self.assertTrue(eip.IPv4Network('169.254.255.254/31').is_link_local)
        self.assertFalse(eip.IPv4Network('169.255.0.4/31').is_link_local)
        # IPv6
        self.assertFalse(eip.IPv6Network(
            'fe7f:ffff:ffff:ffff:ffff:ffff:ffff:fff0/126').is_link_local)
        self.assertTrue(eip.IPv6Network('fe80::/122').is_link_local)
        self.assertTrue(eip.IPv6Network(
            'febf:ffff:ffff:ffff:ffff:ffff:ffff:fff0/126').is_link_local)
        self.assertFalse(eip.IPv6Network('fec0::/122').is_link_local)

    def test_network_is_private(self):
        """Test the network is_private method."""
        # IPv4
        self.assertFalse(eip.IPv4Network('9.255.255.0/30').is_private)
        self.assertTrue(eip.IPv4Network('10.0.0.0/31').is_private)
        self.assertTrue(eip.IPv4Network('10.255.255.0/31').is_private)
        self.assertFalse(eip.IPv4Network('11.0.0.0/31').is_private)
        self.assertFalse(eip.IPv4Network('172.15.255.0/31').is_private)
        self.assertTrue(eip.IPv4Network('172.16.0.0/31').is_private)
        self.assertTrue(eip.IPv4Network('172.31.255.0/31').is_private)
        self.assertFalse(eip.IPv4Network('172.32.0.0/31').is_private)
        self.assertFalse(eip.IPv4Network('192.167.255.0/31').is_private)
        self.assertTrue(eip.IPv4Network('192.168.0.0/31').is_private)
        self.assertTrue(eip.IPv4Network('192.168.255.0/31').is_private)
        self.assertFalse(eip.IPv4Network('192.169.0.0/31').is_private)
        # IPv6
        self.assertFalse(eip.IPv6Network(
            'fbff:ffff:ffff:ffff:ffff:ffff:ffff:fff0/124').is_private)
        self.assertTrue(eip.IPv6Network('fc00::/124').is_private)
        self.assertTrue(eip.IPv6Network(
            'fdff:ffff:ffff:ffff:ffff:ffff:ffff:fff0/124').is_private)
        self.assertFalse(eip.IPv6Network('fe00::/124').is_private)

    def test_network_is_global(self):
        """Test the IPv4network is_global method."""
        # IPv4
        self.assertTrue(eip.IPv4Network('9.255.255.0/30').is_global)
        self.assertFalse(eip.IPv4Network('10.0.0.0/31').is_global)
        self.assertFalse(eip.IPv4Network('10.255.255.0/31').is_global)
        self.assertTrue(eip.IPv4Network('11.0.0.0/31').is_global)
        self.assertFalse(eip.IPv4Network('100.64.0.0/11').is_global)
        self.assertTrue(eip.IPv4Network('172.15.255.0/31').is_global)
        self.assertFalse(eip.IPv4Network('172.16.0.0/31').is_global)
        self.assertFalse(eip.IPv4Network('172.31.255.0/31').is_global)
        self.assertTrue(eip.IPv4Network('172.32.0.0/31').is_global)
        self.assertTrue(eip.IPv4Network('192.167.255.0/31').is_global)
        self.assertFalse(eip.IPv4Network('192.168.0.0/31').is_global)
        self.assertFalse(eip.IPv4Network('192.168.255.0/31').is_global)
        self.assertTrue(eip.IPv4Network('192.169.0.0/31').is_global)
        # IPv6
        self.assertTrue(eip.IPv6Network(
            'fbff:ffff:ffff:ffff:ffff:ffff:ffff:fff0/124').is_global)
        self.assertFalse(eip.IPv6Network('fc00::/124').is_global)
        self.assertFalse(eip.IPv6Network(
            'fdff:ffff:ffff:ffff:ffff:ffff:ffff:fff0/124').is_global)
        self.assertTrue(eip.IPv6Network('fe00::/124').is_global)

    def test_network_is_unspecified(self):
        """Test the IPv4Network.is_unspecified method."""
        # IPv4
        self.assertFalse(eip.IPv4Network('255.255.255.0/31').is_unspecified)
        self.assertFalse(eip.IPv4Network('0.0.0.0/31').is_unspecified)
        self.assertTrue(eip.IPv4Network('0.0.0.0/32').is_unspecified)
        self.assertFalse(eip.IPv4Network('0.0.0.1').is_unspecified)
        # IPv6
        self.assertTrue(eip.IPv6Network('::/128').is_unspecified)
        self.assertFalse(eip.IPv6Network('::1/128').is_unspecified)

    def test_network_is_loopback(self):
        """Test the IPv4Network.is_loopback method."""
        # IPv4
        self.assertFalse(eip.IPv4Network('126.255.255.0/31').is_loopback)
        self.assertTrue(eip.IPv4Network('127.0.0.0/31').is_loopback)
        self.assertTrue(eip.IPv4Network('127.0.0.0/31').is_loopback)
        self.assertFalse(eip.IPv4Network('128.0.0.0/31').is_loopback)
        # IPv6
        self.assertTrue(eip.IPv6Network('::1/128').is_loopback)
        self.assertFalse(eip.IPv6Network('::/128').is_loopback)
        self.assertFalse(eip.IPv6Network('::2/128').is_loopback)

    # =========================================================================
    # class IPv6Network methods
    # =========================================================================

    def test_ipv6network_init(self):
        """Test the IPv6Network.__init__ method."""
        # address, strict, ip, prefixlen, scope
        values = [
            ('::/16', False, 0, 16, None),
            ('::%77/16', False, 0, 16, '77'),
            ('1::', False, 2**112, 128, None),
            ('1::%xyz', False, 2**112, 128, 'xyz'),
            ('ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff/127', False,
                2**128 - 2, 127, None),
            ((0, 112), False, 0, 112, None),
            (0, False, 0, 128, None),
            ((0,), False, 0, 128, None),
            ((999, 111), False, 999 & 0xfffffffffffe0000, 111, None),
            (int(9).to_bytes(4, 'big'), False, 9, 128, None),
        ]
        for address, strict, ip, prefixlen, scope in values:
            net = eip.IPv6Network(address, strict)
            self.assertEqual(int(net.network_address), ip)
            self.assertEqual(net.prefixlen, prefixlen)
            self.assertEqual(net.version, 6)
            self.assertEqual(net.network_address.scope_id, scope)
        # Bad IP addresses
        def fn(*args):
            return eip.IPv6Network(*args)
        self.assertRaises(eip.AddressValueError, fn, '1:2:3:4:5:6:7:8:9/128')
        self.assertRaises(eip.NetmaskValueError, fn, '1:2:3:4:5:6:7:8/129')
        self.assertRaises(eip.AddressValueError, fn, (-1, 22))
        self.assertRaises(eip.AddressValueError, fn, (2**128, 0))
        self.assertRaises(eip.NetmaskValueError, fn, (1, -1))
        self.assertRaises(eip.NetmaskValueError, fn, (1, 129))
        self.assertRaises(eip.AddressValueError, fn, (1.0, 8))

    def test_ipv6network_str(self):
        """Test the BaseIPNetwork.str method."""
        net = eip.IPv6Network('1:2:3::/50')
        self.assertEqual(net.__str__(), '1:2:3::/50')
        net = eip.IPv6Network('2::/16')
        self.assertEqual(net.__str__(), '2::/16')
        net = eip.IPv6Network('ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff')
        self.assertEqual(net.__str__(),
                         'ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff/128')

    def test_ipv6network_repr(self):
        """Test the BaseIPNetwork.repr method."""
        net = eip.IPv6Network('1:2:3::/50')
        self.assertEqual(net.__str__(), '1:2:3::/50')
        net = eip.IPv6Network('2::/16')
        self.assertEqual(net.__repr__(), "IPv6Network('2::/16')")
        net = eip.IPv6Network('ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff')
        self.assertEqual(net.__repr__(),
                "IPv6Network('ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff/128')")

    def test_ipv6network_compressed(self):
        """Test the BaseIPNetwork.compressed method."""
        net = eip.IPv6Network('1:2:3::/48')
        self.assertEqual(net.compressed, '1:2:3::/48')
        net = eip.IPv6Network('2::/16')
        self.assertEqual(net.compressed, '2::/16')
        net = eip.IPv6Network('ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff')
        self.assertEqual(net.compressed,
                         'ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff/128')

    def test_ipv6network_exploded(self):
        """Test the BaseIPNetwork.exploded method."""
        net = eip.IPv6Network('1:2:3::/48')
        self.assertEqual(net.exploded,
                         '0001:0002:0003:0000:0000:0000:0000:0000/48')
        net = eip.IPv6Network('2::/16')
        self.assertEqual(net.exploded,
                         '0002:0000:0000:0000:0000:0000:0000:0000/16')
        net = eip.IPv6Network('ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff')
        self.assertEqual(net.exploded,
                         'ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff/128')

    def test_ipv6network_compare_networks(self):
        """Test the BaseIPNetwork.compare_networks method."""
        net1 = eip.IPv6Network('abba::/16')
        net1a = eip.IPv6Network('abba::/16')
        net2 = eip.IPv6Network('abba::/17')
        net3 = eip.IPv6Network('::2:0')
        self.assertEqual(net1.compare_networks(net1), 0)
        self.assertEqual(net1.compare_networks(net1a), 0)
        self.assertEqual(net1.compare_networks(net2), 1)
        self.assertEqual(net1.compare_networks(net3), 1)
        self.assertEqual(net3.compare_networks(net1), -1)

    def test_ipv6network_eq(self):
        """Test the BaseIPNetwork.__eq__ method."""
        net1 = eip.IPv6Network('abba::/16')
        net1a = eip.IPv6Network('abba::/16')
        net2 = eip.IPv6Network('abba::/15')
        net3 = eip.IPv6Network('::2:0')
        self.assertTrue(net1.__eq__(net1))
        self.assertTrue(net1.__eq__(net1a))
        self.assertFalse(net1.__eq__(net2))
        self.assertFalse(net1.__eq__(net3))
        self.assertFalse(net3.__eq__(net1))
        self.assertEqual(net1.__eq__(17), NotImplemented)

    def test_ipv6network_ne(self):
        """Test the BaseIPNetwork.__ne__ method."""
        net1 = eip.IPv6Network('abba::/16')
        net1a = eip.IPv6Network('abba::/16')
        net2 = eip.IPv6Network('abba::/15')
        net3 = eip.IPv6Network('::2:0')
        self.assertFalse(net1.__ne__(net1))
        self.assertFalse(net1.__ne__(net1a))
        self.assertTrue(net1.__ne__(net2))
        self.assertTrue(net1.__ne__(net3))
        self.assertTrue(net3.__ne__(net1))
        self.assertEqual(net1.__ne__(17), NotImplemented)

    def test_ipv6network_lt(self):
        """Test the BaseIPNetwork.__lt__ method."""
        net1 = eip.IPv6Network('abba::/16')
        net1a = eip.IPv6Network('abba::/16')
        net2 = eip.IPv6Network('abba::/15')
        net3 = eip.IPv6Network('::2:0')
        self.assertFalse(net1.__lt__(net1))
        self.assertFalse(net1.__lt__(net1a))
        self.assertTrue(net1.__lt__(net2))
        self.assertFalse(net1.__lt__(net3))
        self.assertTrue(net3.__lt__(net1))
        self.assertEqual(net1.__lt__(17), NotImplemented)

    def test_ipv6network_le(self):
        """Test the BaseIPNetwork.__le__ method."""
        net1 = eip.IPv6Network('abba::/16')
        net1a = eip.IPv6Network('abba::/16')
        net2 = eip.IPv6Network('abba::/15')
        net3 = eip.IPv6Network('::2:0')
        self.assertTrue(net1.__le__(net1))
        self.assertTrue(net1.__le__(net1a))
        self.assertTrue(net1.__le__(net2))
        self.assertFalse(net1.__le__(net3))
        self.assertTrue(net3.__le__(net1))
        self.assertEqual(net1.__le__(17), NotImplemented)

    def test_ipv6network_gt(self):
        """Test the BaseIPNetwork.__gt__ method."""
        net1 = eip.IPv6Network('abba::/16')
        net1a = eip.IPv6Network('abba::/16')
        net2 = eip.IPv6Network('abba::/15')
        net3 = eip.IPv6Network('::2:0')
        self.assertFalse(net1.__gt__(net1))
        self.assertFalse(net1.__gt__(net1a))
        self.assertFalse(net1.__gt__(net2))
        self.assertTrue(net1.__gt__(net3))
        self.assertFalse(net3.__gt__(net1))
        self.assertEqual(net1.__gt__(17), NotImplemented)

    def test_ipv6network_ge(self):
        """Test the BaseIPNetwork.__ge__ method."""
        net1 = eip.IPv6Network('abba::/16')
        net1a = eip.IPv6Network('abba::/16')
        net2 = eip.IPv6Network('abba::/15')
        net3 = eip.IPv6Network('::2:0')
        self.assertTrue(net1.__ge__(net1))
        self.assertTrue(net1.__ge__(net1a))
        self.assertFalse(net1.__ge__(net2))
        self.assertTrue(net1.__ge__(net3))
        self.assertFalse(net3.__ge__(net1))
        self.assertEqual(net1.__ge__(17), NotImplemented)

    def test_ipv6network_len(self):
        """Test the BaseIPNetwork.len method."""
        for i in range(129):
            net = eip.IPv6Network((0, i))
            self.assertEqual(net.__len__(), 2**(128 - i))

    def test_ipv6network_network_address(self):
        """Test the BaseIPNetwork.network method."""
        for nethost in range(256):
            net = eip.IPv6Network((2**32 + nethost, 120), False)
            self.assertEqual(net.network_address, eip.IPv6Address(2**32))

    def test_ipv6network_hostmask(self):
        """Test the BaseIPNetwork.hostmask method."""
        for preflen in range(129):
            net = eip.IPv6Network((0, preflen))
            addr = eip.IPv6Address(2**(128 - preflen) - 1)
            self.assertEqual(net.hostmask, addr)

    def test_ipv6network_netmask(self):
        """Test the BaseIPNetwork.netmask method."""
        for preflen in range(129):
            net = eip.IPv6Network((0, preflen))
            addr = eip.IPv6Address((2**128) - (2**(128 - preflen)))
            self.assertEqual(net.netmask, addr)

    def test_ipv6network_with_prefixlen(self):
        """Test the BaseIPNetwork.with_prefixlen method."""
        net = eip.IPv6Network('::/5')
        self.assertEqual(net.with_prefixlen, '::/5')
        net = eip.IPv6Network('2::/16')
        self.assertEqual(net.with_prefixlen, '2::/16')
        net = eip.IPv6Network('ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff')
        self.assertEqual(net.with_prefixlen,
                         'ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff/128')

    def test_ipv6network_with_netmask(self):
        """Test the BaseIPNetwork.with_netmask method."""
        net = eip.IPv6Network('::/0')
        self.assertEqual(net.with_netmask, '::/::')
        net = eip.IPv6Network('12::/16')
        self.assertEqual(net.with_netmask, '12::/ffff::')
        net = eip.IPv6Network('1:2:3::/48')
        self.assertEqual(net.with_netmask, '1:2:3::/ffff:ffff:ffff::')
        net = eip.IPv6Network('1:2:3:4::/64')
        self.assertEqual(net.with_netmask, '1:2:3:4::/ffff:ffff:ffff:ffff::')

    def test_ipv6network_with_hostmask(self):
        """Test the BaseIPNetwork.with_hostmask method."""
        net = eip.IPv6Network('::/0')
        self.assertEqual(net.with_hostmask,
                         '::/ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff')
        net = eip.IPv6Network('12::/16')
        self.assertEqual(net.with_hostmask,
                         '12::/0:ffff:ffff:ffff:ffff:ffff:ffff:ffff')
        net = eip.IPv6Network('1:2:3::/48')
        self.assertEqual(net.with_hostmask,
                         '1:2:3::/::ffff:ffff:ffff:ffff:ffff')
        net = eip.IPv6Network('1:2:3:4::/64')
        self.assertEqual(net.with_hostmask, '1:2:3:4::/::ffff:ffff:ffff:ffff')

    def test_ipv6network_getitem(self):
        """Test the BaseIPNetwork.getitem method."""
        net = eip.IPv6Network('::100/120')
        for i in range(len(net)):
            self.assertEqual(net[i], eip.IPv6Address(256 + i))
            self.assertEqual(net[-i - 1], eip.IPv6Address(511 - i))
        def fn(net, index):
            return net[index]
        self.assertRaises(IndexError, fn, net, 256)
        self.assertRaises(IndexError, fn, net, -257)
        self.assertRaises(TypeError, fn, net, 1.0)
        self.assertRaises(TypeError, fn, net, '1')

    def test_ipv6network_iter(self):
        """Test the BaseIPNetwork.iter method."""
        net = eip.IPv6Network('::200/120')
        baseip = 512
        count = 0
        for addr in net:
            self.assertEqual(addr, eip.IPv6Address(baseip + count))
            count += 1
        self.assertEqual(count, 256)

    def test_ipv6network_hosts(self):
        """Test the BaseIPNetwork.hosts method."""
        net = eip.IPv6Network('::200/120')
        baseip = 512
        count = 0
        for addr in net.hosts():
            self.assertEqual(addr, eip.IPv6Address(baseip + count + 1))
            self.assertNotEqual(int(addr), baseip)
            self.assertNotEqual(int(addr), baseip + 256)
            count += 1
        self.assertEqual(count, 255)

    def test_ipv6network_subnetworks(self):
        """Test the BaseIPNetwork.subnetworks method."""
        data = (
            # baseip    preflen diff    sublen  num_subnets
            ( 65536,    112,    0,      65536,  1),
            (   512,    120,    1,      128,    2),
            (  1024,    124,    2,      4,      4),
        )
        for baseip, preflen, diff, sublen, num_subnets in data:
            net = eip.IPv6Network((baseip, preflen))
            ip = baseip
            count = 0
            for sub in net.subnetworks(diff=diff):
                self.assertEqual(sub, eip.IPv6Network((ip, preflen + diff)),
                                 'net=%r diff=%r sub=%r' % (net, diff, sub))
                ip += sublen
                count += 1
            self.assertEqual(count, num_subnets)
            ip = baseip
            count = 0
            for sub in net.subnetworks(preflen=preflen + diff):
                self.assertEqual(sub, eip.IPv6Network((ip, preflen + diff)),
                        'net=%s preflen=%s sub=%s' % (net, preflen + diff, sub))
                ip += sublen
                count += 1
            self.assertEqual(count, num_subnets)
        # bad subnets
        def fn(net, diff, preflen):
            return list(net.subnetworks(diff, preflen=preflen))
        net = eip.IPv6Network((0, 112))
        self.assertRaises(ValueError, fn, net, None, None)
        self.assertRaises(ValueError, fn, net, 1, 127)
        self.assertRaises(ValueError, fn, net, -1, None)
        self.assertRaises(ValueError, fn, net, 32, None)
        self.assertRaises(ValueError, fn, net, None, -1)
        self.assertRaises(ValueError, fn, net, None, 129)

    def test_ipv6network_iter_subnet(self):
        """Test the BaseIPNetwork.subnets method."""
        data = (
            # baseip    preflen diff    sublen  num_subnets
            ( 65536,    112,    0,      65536,  1),
            (   512,    120,    1,      128,    2),
            (  1024,    124,    2,      4,      4),
        )
        for baseip, preflen, diff, sublen, num_subnets in data:
            net = eip.IPv6Network((baseip, preflen))
            ip = baseip
            count = 0
            for sub in net.subnets(diff):
                self.assertEqual(sub, eip.IPv6Network((ip, preflen + diff)),
                                 'net=%r diff=%r sub=%r' % (net, diff, sub))
                ip += sublen
                count += 1
            self.assertEqual(count, num_subnets)
            ip = baseip
            count = 0
            for sub in net.subnets(new_prefix=preflen+diff):
                self.assertEqual(sub, eip.IPv6Network((ip, preflen + diff)),
                        'net=%s preflen=%s sub=%s' % (net, preflen + diff, sub))
                ip += sublen
                count += 1
            self.assertEqual(count, num_subnets)
        # bad subnets
        def fn(net, diff, preflen):
            return list(net.subnets(diff, new_prefix=preflen))
        net = eip.IPv6Network((0, 112))
        self.assertRaises(ValueError, fn, net, 17, None)
        self.assertRaises(ValueError, fn, net, None, 129)
        self.assertRaises(ValueError, fn, net, 2, 127)

    def test_ipv6network_supernetwork(self):
        """Test the BaseIPNetwork.supernetwork method."""
        net = eip.IPv6Network('::8:0/112')
        supernet = eip.IPv6Network('::8:0/111')
        self.assertEqual(net.supernetwork(1), supernet)
        self.assertEqual(net.supernetwork(preflen=111), supernet)
        supernet = eip.IPv6Network('::8:0/110')
        self.assertEqual(net.supernetwork(2), supernet)
        self.assertEqual(net.supernetwork(preflen=110), supernet)
        supernet = eip.IPv6Network('::8:0/109')
        self.assertEqual(net.supernetwork(3), supernet)
        self.assertEqual(net.supernetwork(preflen=109), supernet)
        # bad supernet
        def fn(net, *args, **kwargs):
            return net.supernetwork(*args, **kwargs)
        net = eip.IPv6Network('::8:0/112')
        self.assertRaises(ValueError, fn, net, None, None)
        self.assertRaises(ValueError, fn, net, diff=2, preflen=26)
        net = eip.IPv6Network('::/0')
        self.assertRaises(ValueError, fn, net, diff=1)
        net = eip.IPv6Network('::8:0/112')
        self.assertRaises(ValueError, fn, net, diff=113)
        self.assertRaises(ValueError, fn, net, diff=-1)
        self.assertRaises(ValueError, fn, net, preflen=114)
        self.assertRaises(ValueError, fn, net, preflen=128)
        self.assertRaises(ValueError, fn, net, preflen=-1)

    def test_ipv6network_supernet(self):
        """Test the BaseIPNetwork.supernet method."""
        net = eip.IPv6Network('::8:0/112')
        supernet = eip.IPv6Network('::8:0/111')
        self.assertEqual(net.supernet(1), supernet)
        self.assertEqual(net.supernet(new_prefix=111), supernet)
        supernet = eip.IPv6Network('::8:0/110')
        self.assertEqual(net.supernet(2), supernet)
        self.assertEqual(net.supernet(new_prefix=110), supernet)
        supernet = eip.IPv6Network('::8:0/109')
        self.assertEqual(net.supernet(3), supernet)
        self.assertEqual(net.supernet(new_prefix=109), supernet)
        # no supernet
        net = eip.IPv6Network('::/0')
        self.assertEqual(net.supernet(1), net)
        # bad supernet
        def fn(net, *args, **kwargs):
            return net.supernet(*args, **kwargs)
        net = eip.IPv6Network('::8:0/112')
        self.assertRaises(ValueError, fn, net, None, None)
        self.assertRaises(ValueError, fn, net, prefixlen_diff=2, new_prefix=26)
        self.assertRaises(ValueError, fn, net, 113, new_prefix=None)
        self.assertRaises(ValueError, fn, net, -1, new_prefix=None)
        self.assertRaises(ValueError, fn, net, None, new_prefix=114)
        self.assertRaises(ValueError, fn, net, None, new_prefix=129)
        self.assertRaises(ValueError, fn, net, None, new_prefix=-1)

    def test_ipv6network_contains(self):
        """Test the BaseIPNetwork.contains method."""
        net1 = eip.IPv6Network('::1:0/112')
        net1a = eip.IPv6Network('::1:0/112')
        net2 = eip.IPv6Network('::1:0/113')
        net3 = eip.IPv6Network('::2:0:0')
        addr0 = eip.IPv6Address('::1:1')
        addr1 = eip.IPv6Address('::1:0')
        addr2 = eip.IPv6Address('::1:ff')
        addr3 = eip.IPv6Address('0:1::')
        self.assertTrue(net1.__contains__(net1))
        self.assertTrue(net1.__contains__(net1a))
        self.assertTrue(net1.__contains__(net2))
        self.assertFalse(net1.__contains__(net3))
        self.assertFalse(net2.__contains__(net1))
        self.assertFalse(net3.__contains__(net1))
        self.assertTrue(net1.__contains__(addr0))
        self.assertTrue(net1.__contains__(addr1))
        self.assertTrue(net1.__contains__(addr2))
        self.assertFalse(net1.__contains__(addr3))

    def test_ipv6network_overlaps(self):
        """Test the BaseIPNetwork.overlaps method."""
        net1 = eip.IPv6Network('::1:0:0/96')
        net1a = eip.IPv6Network('::1:0:0/96')
        net2 = eip.IPv6Network('::1:0:0/112')
        net3 = eip.IPv6Network('::2:0:0:0')
        self.assertTrue(net1.overlaps(net1))
        self.assertTrue(net1.overlaps(net1a))
        self.assertTrue(net1.overlaps(net2))
        self.assertFalse(net1.overlaps(net3))
        self.assertTrue(net2.overlaps(net1))
        self.assertFalse(net3.overlaps(net1))

    def test_ipv6network_exclude(self):
        """Test the BaseIPNetwork.exclude method."""
        def fn(net, *args, **kwargs):
            return list(net.address_exclude(*args, **kwargs))
        net = eip.IPv6Network('0:1::/32')
        sub1a = eip.IPv6Network('0:1::/33')
        sub1b = eip.IPv6Network('0:1:8000::/33')
        self.assertEqual(fn(net, sub1a), [sub1b])
        self.assertEqual(fn(net, sub1b), [sub1a])
        sub2a = eip.IPv6Network('0:1::/34')
        sub2b = eip.IPv6Network('0:1:4000::/34')
        sub2c = eip.IPv6Network('0:1:8000::/34')
        sub2d = eip.IPv6Network('0:1:c000::/34')
        self.assertEqual(fn(net, sub2a), [sub2b, sub1b])
        self.assertEqual(fn(net, sub2b), [sub2a, sub1b])
        self.assertEqual(fn(net, sub2c), [sub1a, sub2d])
        self.assertEqual(fn(net, sub2d), [sub1a, sub2c])
        net = eip.IPv6Network('0:1::/126')
        sub1a = eip.IPv6Network('0:1::/127')
        sub1b = eip.IPv6Network('0:1::2/127')
        self.assertEqual(fn(net, sub1a), [sub1b])
        self.assertEqual(fn(net, sub1b), [sub1a])
        sub2a = eip.IPv6Network('0:1::/128')
        sub2b = eip.IPv6Network('0:1::1/128')
        sub2c = eip.IPv6Network('0:1::2/128')
        sub2d = eip.IPv6Network('0:1::3/128')
        addr2a = eip.IPv6Network('0:1::')
        addr2b = eip.IPv6Network('0:1::1')
        addr2c = eip.IPv6Network('0:1::2')
        addr2d = eip.IPv6Network('0:1::3')
        self.assertEqual(fn(net, addr2a), [sub2b, sub1b])
        self.assertEqual(fn(net, addr2b), [sub2a, sub1b])
        self.assertEqual(fn(net, addr2c), [sub1a, sub2d])
        self.assertEqual(fn(net, addr2d), [sub1a, sub2c])
        net = eip.IPv6Network('0:1::/32')
        self.assertEqual(fn(net, net), [])
        # IPv6Network / IPv4Network
        net4 = eip.IPv4Network((65536, 16))
        net6 = eip.IPv6Network((65536, 112))
        self.assertRaises(TypeError, fn, net6, net4)

    def test_ipv6network_address_exclude(self):
        """Test the BaseIPNetwork.address_exclude method."""
        def fn(net, *args, **kwargs):
            return list(net.address_exclude(*args, **kwargs))
        net = eip.IPv6Network('0:1::/32')
        sub1a = eip.IPv6Network('0:1::/33')
        sub1b = eip.IPv6Network('0:1:8000::/33')
        self.assertEqual(fn(net, sub1a), [sub1b])
        self.assertEqual(fn(net, sub1b), [sub1a])
        sub2a = eip.IPv6Network('0:1::/34')
        sub2b = eip.IPv6Network('0:1:4000::/34')
        sub2c = eip.IPv6Network('0:1:8000::/34')
        sub2d = eip.IPv6Network('0:1:c000::/34')
        self.assertEqual(fn(net, sub2a), [sub2b, sub1b])
        self.assertEqual(fn(net, sub2b), [sub2a, sub1b])
        self.assertEqual(fn(net, sub2c), [sub1a, sub2d])
        self.assertEqual(fn(net, sub2d), [sub1a, sub2c])
        net = eip.IPv6Network('0:1::/126')
        sub1a = eip.IPv6Network('0:1::/127')
        sub1b = eip.IPv6Network('0:1::2/127')
        self.assertEqual(fn(net, sub1a), [sub1b])
        self.assertEqual(fn(net, sub1b), [sub1a])
        sub2a = eip.IPv6Network('0:1::/128')
        sub2b = eip.IPv6Network('0:1::1/128')
        sub2c = eip.IPv6Network('0:1::2/128')
        sub2d = eip.IPv6Network('0:1::3/128')
        addr2a = eip.IPv6Network('0:1::')
        addr2b = eip.IPv6Network('0:1::1')
        addr2c = eip.IPv6Network('0:1::2')
        addr2d = eip.IPv6Network('0:1::3')
        self.assertEqual(fn(net, addr2a), [sub2b, sub1b])
        self.assertEqual(fn(net, addr2b), [sub2a, sub1b])
        self.assertEqual(fn(net, addr2c), [sub1a, sub2d])
        self.assertEqual(fn(net, addr2d), [sub1a, sub2c])
        # bad subnet
        # IPv4Network / IPv6Network
        net4 = eip.IPv4Network((65536, 16))
        net6 = eip.IPv6Network((0, 120))
        self.assertRaises(TypeError, fn, net4, net6)
        # IPv6Network / IPv4Network
        net4 = eip.IPv4Network((65536, 16))
        net6 = eip.IPv6Network((0, 8))
        self.assertRaises(TypeError, fn, net6, net4)
        # IPv4Network / IPv6Address
        net4 = eip.IPv4Network((65536, 16))
        addr6 = eip.IPv6Address(16384)
        self.assertRaises(TypeError, fn, net4, addr6)
        # IPv6Network / IPv4Address
        net6 = eip.IPv6Network(16384)
        addr4 = eip.IPv4Address(65536)
        self.assertRaises(TypeError, fn, net6, addr4)
        # non contained
        net1 = eip.IPv4Network((65536, 16))
        net2 = eip.IPv4Network((2 << 24, 8))
        self.assertRaises(ValueError, fn, net1, net2)

    def test_ipv6network_broadcast_int(self):
        """Test the BaseIPNetwork._broadcast_int method."""
        for preflen in range(129):
            ip = 2**(128 - preflen) & 0xffffffff
            bip = ip | ((2**(128 - preflen)) - 1)
            net = eip.IPv6Network((ip, preflen))
            self.assertEqual(net._broadcast_int, bip)

    def test_ipv6network_broadcast_address(self):
        """Test the BaseIPNetwork.broadcast_address method."""
        for preflen in range(129):
            ip = 2**(128 - preflen) & 0xffffffffffffffffffffffffffffffff
            baddr = eip.IPv6Address(ip | ((2**(128 - preflen)) - 1))
            net = eip.IPv6Network((ip, preflen))
            self.assertEqual(net.broadcast_address, baddr)

    def test_ipv6network_reverse_pointer(self):
        """Test the IPv6Network.reverse_pointer method."""
        data = [
            (eip.IPv6Network('1:2:3:4:5:6:7:0/112'),
             '2.1.1./.0.0.0.0.7.0.0.0.6.0.0.0.5.0.0.0.'
             '4.0.0.0.3.0.0.0.2.0.0.0.1.0.0.0.ip6.arpa'),
        ]
        for addr, expect in data:
            self.assertEqual(addr.reverse_pointer, expect)

    def test_ipv6network_reduce(self):
        """Test the IPv6Network.reduce method."""
        data = [
            eip.IPv6Network('::/112'),
            eip.IPv6Network('2001::/96'),
        ]
        for addr in data:
            _class, args = addr.__reduce__()
            got = _class(*args)
            self.assertEqual(got, addr)

    # =========================================================================
    # ip_network factory function
    # =========================================================================

    def test_IPNetwork(self):
        """Test the ip_network function."""
        # IPv4 networks
        net = eip.ip_network('0.0.0.0/24')
        self.assertEqual(int(net.network_address), 0)
        self.assertEqual(net.version, 4)
        self.assertEqual(net.prefixlen, 24)
        net = eip.ip_network('1.0.0.0')
        self.assertEqual(int(net.network_address), 2**24)
        self.assertEqual(net.version, 4)
        self.assertEqual(net.prefixlen, 32)
        net = eip.ip_network(0)
        self.assertEqual(int(net.network_address), 0)
        self.assertEqual(net.version, 4)
        self.assertEqual(net.prefixlen, 32)
        net = eip.ip_network(999)
        self.assertEqual(int(net.network_address), 999)
        self.assertEqual(net.version, 4)
        self.assertEqual(net.prefixlen, 32)
        # IPv6 networks
        net = eip.ip_network('::/112')
        self.assertEqual(int(net.network_address), 0)
        self.assertEqual(net.version, 6)
        self.assertEqual(net.prefixlen, 112)
        net = eip.ip_network('1::')
        self.assertEqual(int(net.network_address), 2**112)
        self.assertEqual(net.version, 6)
        self.assertEqual(net.prefixlen, 128)
        net = eip.ip_network(2**32)
        self.assertEqual(int(net.network_address), 2**32)
        self.assertEqual(net.version, 6)
        self.assertEqual(net.prefixlen, 128)
        # Bad IP networks
        fn = eip.ip_network
        self.assertRaises(ValueError, fn, '1.2.3.4.5/23')
        self.assertRaises(ValueError, fn, '1:2:3:4:5/23')
        self.assertRaises(ValueError, fn, -1)
        self.assertRaises(ValueError, fn, 2**128)
        self.assertRaises(ValueError, fn, 1.0)

    # =========================================================================
    # Address and Network utilities
    # =========================================================================

    def test_get_mixed_type_key(self):
        """Test the get_mixed_type_key function."""
        sorted_objs = [
            eip.ip_address('0.0.0.0'),
            eip.ip_network('0.0.0.0/28'),
            eip.ip_network('0.0.0.0/24'),
            eip.ip_network('0.0.0.0/1'),
            eip.ip_network('0.0.0.0/0'),
            eip.ip_address('0.0.1.0'),
            eip.ip_network('0.0.1.0/32'),
            eip.ip_address('1.0.0.0'),
            eip.ip_address('2.3.0.0'),
            eip.ip_network('2.3.0.0/24'),
            eip.ip_address('2.3.0.1'),
            eip.ip_address('2.3.0.255'),
            eip.ip_network('2.3.1.0/24'),
            eip.ip_network('2.4.0.0/24'),
            eip.ip_address('9.8.7.6'),
            eip.ip_address('::'),
            eip.ip_network('::/128'),
            eip.ip_network('::/1'),
            eip.ip_network('::/0'),
            eip.ip_address('::1'),
            eip.ip_address('1000::1'),
            eip.ip_address('1000::111'),
        ]
        unsorted_objs = sorted_objs[:]
        random.shuffle(unsorted_objs)
        resorted_objs = sorted(unsorted_objs, key=eip.get_mixed_type_key)
        self.assertEqual(resorted_objs, sorted_objs)

    def test_summarize_address_range(self):
        """Test the summarize_address_range function."""
        # IPv4 addresses
        first = eip.ip_address('0.0.0.0')
        last = eip.ip_address('0.0.0.0')
        nets = [eip.ip_network('0.0.0.0/32')]
        got = list(eip.summarize_address_range(first, last))
        self.assertEqual(got, nets, 'first=%s last=%s' % (first, last))
        first = eip.ip_address('0.0.0.0')
        last = eip.ip_address('255.255.255.255')
        nets = [eip.ip_network('0.0.0.0/0')]
        got = list(eip.summarize_address_range(first, last))
        self.assertEqual(got, nets, 'first=%s last=%s' % (first, last))
        first = eip.ip_address('0.0.0.0')
        last = eip.ip_address('0.255.255.255')
        nets = [eip.ip_network('0.0.0.0/8')]
        got = list(eip.summarize_address_range(first, last))
        self.assertEqual(got, nets, 'first=%s last=%s' % (first, last))
        first = eip.ip_address('0.0.0.0')
        last = eip.ip_address('0.0.255.255')
        nets = [eip.ip_network('0.0.0.0/16')]
        got = list(eip.summarize_address_range(first, last))
        self.assertEqual(got, nets, 'first=%s last=%s' % (first, last))
        first = eip.ip_address('0.0.0.0')
        last = eip.ip_address('0.0.0.255')
        nets = [eip.ip_network('0.0.0.0/24')]
        got = list(eip.summarize_address_range(first, last))
        self.assertEqual(got, nets, 'first=%s last=%s' % (first, last))
        first = eip.ip_address('1.0.0.0')
        last = eip.ip_address('2.255.255.255')
        nets = [eip.ip_network('1.0.0.0/8'), eip.ip_network('2.0.0.0/8')]
        got = list(eip.summarize_address_range(first, last))
        self.assertEqual(got, nets, 'first=%s last=%s' % (first, last))
        first = eip.ip_address('1.0.0.0')
        last = eip.ip_address('3.255.255.255')
        nets = [eip.ip_network('1.0.0.0/8'), eip.ip_network('2.0.0.0/7')]
        got = list(eip.summarize_address_range(first, last))
        self.assertEqual(got, nets, 'first=%s last=%s' % (first, last))
        first = eip.ip_address('1.2.3.8')
        last = eip.ip_address('1.2.3.25')
        nets = [eip.ip_network('1.2.3.8/29'),
                eip.ip_network('1.2.3.16/29'),
                eip.ip_network('1.2.3.24/31')]
        got = list(eip.summarize_address_range(first, last))
        self.assertEqual(got, nets, 'first=%s last=%s' % (first, last))
        # IPv6 addresses
        first = eip.ip_address('::')
        last = eip.ip_address('::')
        nets = [eip.ip_network('::/128')]
        got = list(eip.summarize_address_range(first, last))
        self.assertEqual(got, nets, 'first=%s last=%s' % (first, last))
        first = eip.ip_address('::')
        last = eip.ip_address(2**128 - 1)
        nets = [eip.ip_network('::/0')]
        got = list(eip.summarize_address_range(first, last))
        self.assertEqual(got, nets, 'first=%s last=%s' % (first, last))
        first = eip.ip_address('::')
        last = eip.ip_address('::ffff:ffff')
        nets = [eip.ip_network('::/96')]
        got = list(eip.summarize_address_range(first, last))
        self.assertEqual(got, nets, 'first=%s last=%s' % (first, last))
        first = eip.ip_address('::')
        last = eip.ip_address('::ffff')
        nets = [eip.ip_network('::/112')]
        got = list(eip.summarize_address_range(first, last))
        self.assertEqual(got, nets, 'first=%s last=%s' % (first, last))
        first = eip.ip_address('::1:0000')
        last = eip.ip_address('::2:ffff')
        nets = [eip.ip_network('::1:0000/112'),
                eip.ip_network('::2:0000/112')]
        got = list(eip.summarize_address_range(first, last))
        self.assertEqual(got, nets, 'first=%s last=%s' % (first, last))
        first = eip.ip_address('::1:0000')
        last = eip.ip_address('::3:ffff')
        nets = [eip.ip_network('::1:0000/112'),
                eip.ip_network('::2:0000/111')]
        got = list(eip.summarize_address_range(first, last))
        self.assertEqual(got, nets, 'first=%s last=%s' % (first, last))
        first = eip.ip_address('1:2:3:8::')
        last = eip.ip_address('1:2:3:19::')
        nets = [eip.ip_network('1:2:3:8::/61'),
                eip.ip_network('1:2:3:10::/61'),
                eip.ip_network('1:2:3:18::/64'),
                eip.ip_network('1:2:3:19::/128')]
        got = list(eip.summarize_address_range(first, last))
        self.assertEqual(got, nets, 'first=%s last=%s' % (first, last))
        # exceptions
        def fn(*args):
            return list(eip.summarize_address_range(*args))
        addr4 = eip.IPv4Address(65536)
        addr6 = eip.IPv6Address(1000)
        self.assertRaises(TypeError, fn, addr6, addr4)
        self.assertRaises(TypeError, fn, addr4, addr6)
        self.assertRaises(TypeError, fn, addr6, 1)
        self.assertRaises(TypeError, fn, 1, 101)

    def test_collapse_addresses(self):
        """Test the collapse_addresses function."""
        # 0 networks
        nets = []
        clps = []
        self.assertEqual(list(eip.collapse_addresses(nets)), clps)
        # 1 network
        nets = [eip.ip_network('0.1.0.0/16')]
        clps = [eip.ip_network('0.1.0.0/16')]
        self.assertEqual(list(eip.collapse_addresses(nets)), clps)
        # 2 non-adjacent IPv4 networks
        nets = [eip.ip_network('0.0.0.0/16'),
                eip.ip_network('0.2.0.0/16')]
        clps = nets
        self.assertEqual(list(eip.collapse_addresses(nets)), clps)
        # 2 adjacent IPv4 networks at end of nets
        nets = [eip.ip_network('0.0.0.0/16'),
                eip.ip_network('0.1.0.0/16')]
        clps = [eip.ip_network('0.0.0.0/15')]
        self.assertEqual(list(eip.collapse_addresses(nets)), clps)
        # 3 adjacent IPv4 networks at end of nets, 2 collapse
        nets = [eip.ip_network('1.2.0.0/16'),
                eip.ip_network('1.3.0.0/16'),
                eip.ip_network('1.4.0.0/16')]
        clps = [eip.ip_network('1.2.0.0/15'),
                eip.ip_network('1.4.0.0/16')]
        self.assertEqual(list(eip.collapse_addresses(nets)), clps)
        # 2 adjacent IPv4 networks before end of nets
        nets = [eip.ip_network('0.0.0.0/16'),
                eip.ip_network('0.1.0.0/16'),
                eip.ip_network('0.9.0.0/16')]
        clps = [eip.ip_network('0.0.0.0/15'),
                eip.ip_network('0.9.0.0/16')]
        self.assertEqual(list(eip.collapse_addresses(nets)), clps)
        # 3 adjacent IPv4 networks before end of nets, 2 collapse
        nets = [eip.ip_network('1.2.0.0/16'),
                eip.ip_network('1.3.0.0/16'),
                eip.ip_network('1.4.0.0/16'),
                eip.ip_network('1.9.0.0/16')]
        clps = [eip.ip_network('1.2.0.0/15'),
                eip.ip_network('1.4.0.0/16'),
                eip.ip_network('1.9.0.0/16')]
        self.assertEqual(list(eip.collapse_addresses(nets)), clps)
        # IPv4 net + subnet collapsed
        nets = [eip.ip_network('8.0.0.0/16'),
                eip.ip_network('8.0.100.0/24')]
        clps = [eip.ip_network('8.0.0.0/16')]
        self.assertEqual(list(eip.collapse_addresses(nets)), clps)
        # IPv4 subnet + net collapsed
        nets = [eip.ip_network('8.0.100.0/24'),
                eip.ip_network('8.0.0.0/16')]
        clps = [eip.ip_network('8.0.0.0/16')]
        self.assertEqual(list(eip.collapse_addresses(nets)), clps)
        # 2 adjacent IPv6 networks at end of nets
        nets = [eip.ip_network('::/16'), eip.ip_network('1::/16')]
        clps = [eip.ip_network('::/15')]
        self.assertEqual(list(eip.collapse_addresses(nets)), clps)
        # exceptions
        def fn(nets):
            return list(eip.collapse_addresses(nets))
        nets = [eip.ip_network('::/16'), eip.ip_network('0.0.0.0/16')]
        self.assertRaises(TypeError, fn, nets)
        nets = [eip.ip_network('::/16'), 1]
        self.assertRaises(TypeError, fn, nets)

    def test__count_righthand_zero_bits(self):
        """Test the _count_righthand_zero_bits function."""
        fn = eip._count_righthand_zero_bits
        for bits in 32, 128:
            self.assertEqual(fn(0, bits), bits,
                             '0x%x, (%d) - %d' % (0, bits, bits))
            for rhzbits in range(bits + 2):
                n = 2**rhzbits
                if bits == 32:
                    nhex = '0x%08x' % (n,)
                else:
                    nhex = '0x%032x' % (n,)
                expect = min(bits, rhzbits)
                got = fn(n, bits)
                self.assertEqual(got, expect,
                                 '%s, (%d) - %d' % (nhex, bits, rhzbits))

    # =========================================================================
    # class Interface methods
    # =========================================================================

    def test_ipv4interface_init(self):
        """Test the IPv4Interface.__init__ method."""
        values = [
            ('0.0.0.0', 0, 32),
            (0, 0, 32),
            (999, 999, 32),
            ('3.0.0.0', 3 * 2**24, 32),
            ('1.2.3.4/24', 0x01020304, 24),
            (('1.2.3.4', 20), 0x01020304, 20),
            (int(9).to_bytes(4, 'big'), 9, 32),
        ]
        for interface, ip, prefixlen in values:
            iface = eip.IPv4Interface(interface)
            net = eip.IPv4Network(interface, False)
            self.assertEqual(iface.network, net)
            self.assertEqual(iface.ip, eip.IPv4Address(ip))
            self.assertEqual(iface.version, 4)
            self.assertEqual(iface.network.prefixlen, prefixlen)
        # Bad IP interfacees
        def fn(val):
            return eip.IPv4Interface(val)
        self.assertRaises(eip.AddressValueError, fn, '1.2.3.4.5')
        self.assertRaises(eip.AddressValueError, fn, -1)
        self.assertRaises(eip.AddressValueError, fn, 2**32)
        self.assertRaises(eip.AddressValueError, fn, 1.0)

    def test_ipv6interface_init(self):
        """Test the IPv6Interface.__init__ method."""
        i = (1 << 24) + (2 << 16) + (3 << 8) + 4
        values = [
            ('::', 0, 128),
            (0, 0, 128),
            ('1::', 2**112, 128),
            (999, 999, 128),
            ('3::4:5:6', (3 * 2**112) + (4 << 32) + (5 << 16) + 6, 128),
            ('::1:2:3:4/112', 0x0001000200030004, 112),
            ((2 * 2**60 + 256, 64), 0x2000000000000100, 64),
            (int(9).to_bytes(16, 'big'), 9, 128),
        ]
        for interface, ip, prefixlen in values:
            iface = eip.IPv6Interface(interface)
            net = eip.IPv6Network(interface, False)
            self.assertEqual(iface.network, net)
            self.assertEqual(iface.ip, eip.IPv6Address(ip))
            self.assertEqual(iface.version, 6)
            self.assertEqual(iface.network.prefixlen, prefixlen)
        # Bad IP interfacees
        def fn(val):
            return eip.IPv6Interface(val)
        self.assertRaises(eip.AddressValueError, fn, '1:2:3:4:5')
        self.assertRaises(eip.AddressValueError, fn, -1)
        self.assertRaises(eip.AddressValueError, fn, 2**128)
        self.assertRaises(eip.AddressValueError, fn, 1.0)

    def test_ipv4interface_int(self):
        """Test the IPv4IPInterface.int method."""
        iface = eip.IPv4Interface('0.0.0.0')
        self.assertEqual(iface.__int__(), 0)
        iface = eip.IPv4Interface('2.0.0.0')
        self.assertEqual(iface.__int__(), 2 * 2**24)
        iface = eip.IPv4Interface('255.255.255.255')
        self.assertEqual(iface.__int__(), 2**32 - 1)

    def test_ipv6interface_int(self):
        """Test the IPv6Interface.int method."""
        iface = eip.IPv6Interface('::')
        self.assertEqual(iface.__int__(), 0)
        iface = eip.IPv6Interface('2::')
        self.assertEqual(iface.__int__(), 2 * 2**112)
        iface = eip.IPv6Interface('ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff')
        self.assertEqual(iface.__int__(), 2**128 - 1)

    def test_ipv4interface_str(self):
        """Test the IPv4IPInterface.str method."""
        iface = eip.IPv4Interface('0.0.0.0')
        self.assertEqual(iface.__str__(), '0.0.0.0/32')
        iface = eip.IPv4Interface('2.0.0.0')
        self.assertEqual(iface.__str__(), '2.0.0.0/32')
        iface = eip.IPv4Interface('255.255.255.255/32')
        self.assertEqual(iface.__str__(), '255.255.255.255/32')

    def test_ipv6interface_str(self):
        """Test the IPv6Interface.str method."""
        iface = eip.IPv6Interface('::')
        self.assertEqual(iface.__str__(), '::/128')
        iface = eip.IPv6Interface('2::')
        self.assertEqual(iface.__str__(), '2::/128')
        iface = eip.IPv6Interface('ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff')
        self.assertEqual(iface.__str__(),
                         'ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff/128')

    def test_ipv4interface_repr(self):
        """Test the IPv4IPInterface.repr method."""
        iface = eip.IPv4Interface('0.0.0.0')
        self.assertEqual(iface.__repr__(), "IPv4Interface('0.0.0.0/32')")
        iface = eip.IPv4Interface('2.0.0.0')
        self.assertEqual(iface.__repr__(), "IPv4Interface('2.0.0.0/32')")
        iface = eip.IPv4Interface('255.255.255.255')
        self.assertEqual(iface.__repr__(), "IPv4Interface('255.255.255.255/32')")

    def test_ipv6interface_repr(self):
        """Test the IPv6Interface.repr method."""
        iface = eip.IPv6Interface('::')
        self.assertEqual(iface.__repr__(), "IPv6Interface('::/128')")
        iface = eip.IPv6Interface('2::')
        self.assertEqual(iface.__repr__(), "IPv6Interface('2::/128')")
        iface = eip.IPv6Interface('ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff')
        self.assertEqual(iface.__repr__(),
                "IPv6Interface('ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff/128')")

    def test_ipv4interface_compressed(self):
        """Test the IPv4IPInterface.compressed method."""
        iface = eip.IPv4Interface('0.0.0.0')
        self.assertEqual(iface.compressed, '0.0.0.0/32')
        iface = eip.IPv4Interface('2.0.0.0')
        self.assertEqual(iface.compressed, '2.0.0.0/32')
        iface = eip.IPv4Interface('255.255.255.255')
        self.assertEqual(iface.compressed, '255.255.255.255/32')

    def test_ipv6interface_compressed(self):
        """Test the IPv6Interface.compressed method."""
        iface = eip.IPv6Interface('::')
        self.assertEqual(iface.compressed, '::/128')
        iface = eip.IPv6Interface('2::')
        self.assertEqual(iface.compressed, '2::/128')
        iface = eip.IPv6Interface('ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff')
        self.assertEqual(iface.compressed,
                         'ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff/128')

    def test_ipv4interface_exploded(self):
        """Test the IPv4IPInterface.exploded method."""
        iface = eip.IPv4Interface('0.0.0.0')
        self.assertEqual(iface.exploded, '0.0.0.0/32')
        iface = eip.IPv4Interface('2.0.0.0')
        self.assertEqual(iface.exploded, '2.0.0.0/32')
        iface = eip.IPv4Interface('255.255.255.255')
        self.assertEqual(iface.exploded, '255.255.255.255/32')

    def test_ipv6interface_exploded(self):
        """Test the IPv6Interface.exploded method."""
        iface = eip.IPv6Interface('::/7')
        self.assertEqual(iface.exploded,
                         '0000:0000:0000:0000:0000:0000:0000:0000/7')
        iface = eip.IPv6Interface('2::/7')
        self.assertEqual(iface.exploded,
                         '0002:0000:0000:0000:0000:0000:0000:0000/7')
        iface = eip.IPv6Interface('ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff/7')
        self.assertEqual(iface.exploded,
                         'ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff/7')

    def test_ip_interface_format(self):
        """Test the BaseIPInterface.format method."""
        data = [
            (eip.IPv4Interface('11.22.33.44'),
             '11.22.33.44/32',                               # %s
             '00001011000101100010000100101100',             # %b
             '0b00001011000101100010000100101100',           # %#b
             '0000_1011_0001_0110_0010_0001_0010_1100',      # %_b
             '0b0000_1011_0001_0110_0010_0001_0010_1100',    # %#_b
             '0b16212c',                                     # %x
             '0x0b16212c',                                   # %#x
             '0b16_212c',                                    # %_x
             '0x0b16_212c',                                  # %#_x
             '0B16212C',                                     # %X
             '0X0B16212C',                                   # %#X
             '0B16_212C',                                    # %_X
             '0X0B16_212C',                                  # %#_X
             '00001011000101100010000100101100',             # %n
            ),
            (eip.IPv6Interface('2000:1234::abcd'),
             '2000:1234::abcd/128',                          # %s
             '00100000000000000001001000110100000000000000000000000000000000000000000000000000000000000000000000000000000000001010101111001101',   # %b
             '0b00100000000000000001001000110100000000000000000000000000000000000000000000000000000000000000000000000000000000001010101111001101', # %#b
             '0010_0000_0000_0000_0001_0010_0011_0100_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_1010_1011_1100_1101',    # %_b
             '0b0010_0000_0000_0000_0001_0010_0011_0100_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_1010_1011_1100_1101',  # %#_b
             '2000123400000000000000000000abcd',             # %x
             '0x2000123400000000000000000000abcd',           # %#x
             '2000_1234_0000_0000_0000_0000_0000_abcd',      # %_x
             '0x2000_1234_0000_0000_0000_0000_0000_abcd',    # %#_x
             '2000123400000000000000000000ABCD',             # %X
             '0X2000123400000000000000000000ABCD',           # %#X
             '2000_1234_0000_0000_0000_0000_0000_ABCD',      # %_X
             '0X2000_1234_0000_0000_0000_0000_0000_ABCD',    # %#_X
             '2000123400000000000000000000abcd',             # %n
            )
        ]
        for (iface, fs, fb, fhb, f_b, fh_b, fx, fhx, f_x, fh_x,
                fX, fhX, f_X, fh_X, fn) in data:
            self.assertEqual(f'{iface:s}', fs)
            self.assertEqual(f'{iface:b}', fb)
            self.assertEqual(f'{iface:#b}', fhb)
            self.assertEqual(f'{iface:_b}', f_b)
            self.assertEqual(f'{iface:#_b}', fh_b)
            self.assertEqual(f'{iface:x}', fx)
            self.assertEqual(f'{iface:#x}', fhx)
            self.assertEqual(f'{iface:_x}', f_x)
            self.assertEqual(f'{iface:#_x}', fh_x)
            self.assertEqual(f'{iface:X}', fX)
            self.assertEqual(f'{iface:#X}', fhX)
            self.assertEqual(f'{iface:_X}', f_X)
            self.assertEqual(f'{iface:#_X}', fh_X)
            self.assertEqual(f'{iface:n}', fn)

    def test_ipv4interface_eq(self):
        """Test the IPv4Interface.__eq__ method."""
        data = [
            (eip.IPv4Interface('0.0.1.0'), eip.IPv4Interface('0.0.1.0'), True),
            (eip.IPv4Interface('0.0.1.0'), eip.IPv4Interface('0.0.2.0'), False),
            (eip.IPv4Interface('0.0.1.0/4'), eip.IPv4Address('0.0.1.0'), False),
            (eip.IPv4Interface('0.0.1.0'), 999, NotImplemented),
            (eip.IPv4Interface(1), eip.IPv4Network(1), NotImplemented),
        ]
        for a, b, expect in data:
            self.assertEqual(a.__eq__(b), expect, '%r == %r' % (a, b))

    def test_ipv4interface_ne(self):
        """Test the IPv4Interface.__ne__ method."""
        data = [
            (eip.IPv4Interface('0.0.1.0'), eip.IPv4Interface('0.0.1.0'), False),
            (eip.IPv4Interface('0.0.1.0'), eip.IPv4Interface('0.0.2.0'), True),
            (eip.IPv4Interface('0.0.1.0/4'), eip.IPv4Address('0.0.1.0'), True),
            (eip.IPv4Interface('0.0.1.0'), 999, NotImplemented),
            (eip.IPv4Interface(1), eip.IPv4Network(1), NotImplemented),
        ]
        for a, b, expect in data:
            self.assertEqual(a.__ne__(b), expect, '%r != %r' % (a, b))

    def test_ipv4interface_lt(self):
        """Test the IPv4Interface.__lt__ method."""
        data = [
            (eip.IPv4Interface('0.0.1.0'), eip.IPv4Interface('0.0.1.0'), False),
            (eip.IPv4Interface('0.0.1.0'), eip.IPv4Interface('0.0.2.0'), True),
            (eip.IPv4Interface('0.0.2.0'), eip.IPv4Interface('0.0.1.0'), False),
            (eip.IPv4Interface((250, 4)), eip.IPv4Interface(250), False),
            (eip.IPv4Interface('0.0.1.0/4'), eip.IPv4Address('0.0.1.0'), False),
            (eip.IPv4Interface('0.0.1.0'), eip.IPv4Address('0.0.1.0'), False),
            (eip.IPv4Interface('0.0.1.0'), 999, NotImplemented),
            (eip.IPv4Interface(1), eip.IPv4Network(1), NotImplemented),
        ]
        for a, b, expect in data:
            self.assertEqual(a.__lt__(b), expect, '%r < %r' % (a, b))

    def test_ipv4interface_le(self):
        """Test the IPv4Interface.__le__ method."""
        data = [
            (eip.IPv4Interface('0.0.1.0'), eip.IPv4Interface('0.0.1.0'), True),
            (eip.IPv4Interface('0.0.1.0'), eip.IPv4Interface('0.0.2.0'), True),
            (eip.IPv4Interface('0.0.2.0'), eip.IPv4Interface('0.0.1.0'), False),
            (eip.IPv4Interface((250, 4)), eip.IPv4Interface(250), False),
            (eip.IPv4Interface('0.0.1.0/4'), eip.IPv4Address('0.0.1.0'), False),
            (eip.IPv4Interface('0.0.1.0'), eip.IPv4Address('0.0.1.0'), False),
            (eip.IPv4Interface('0.0.1.0'), 999, NotImplemented),
            (eip.IPv4Interface(1), eip.IPv4Network(1), NotImplemented),
        ]
        for a, b, expect in data:
            self.assertEqual(a.__le__(b), expect, '%r <= %r' % (a, b))

    def test_ipv4interface_gt(self):
        """Test the IPv4Interface.__gt__ method."""
        data = [
            (eip.IPv4Interface('0.0.1.0'), eip.IPv4Interface('0.0.1.0'), False),
            (eip.IPv4Interface('0.0.1.0'), eip.IPv4Interface('0.0.2.0'), False),
            (eip.IPv4Interface('0.0.2.0'), eip.IPv4Interface('0.0.1.0'), True),
            (eip.IPv4Interface((250, 4)), eip.IPv4Interface(250), True),
            (eip.IPv4Interface('0.0.1.0/4'), eip.IPv4Address('0.0.1.0'), True),
            (eip.IPv4Interface('0.0.1.0'), eip.IPv4Address('0.0.1.0'), True),
            (eip.IPv4Interface('0.0.1.0'), 999, NotImplemented),
            (eip.IPv4Interface(1), eip.IPv4Network(1), NotImplemented),
        ]
        for a, b, expect in data:
            self.assertEqual(a.__gt__(b), expect, '%r > %r' % (a, b))

    def test_ipv4interface_ge(self):
        """Test the IPv4Interface.__ge__ method."""
        data = [
            (eip.IPv4Interface('0.0.1.0'), eip.IPv4Interface('0.0.1.0'), True),
            (eip.IPv4Interface('0.0.1.0'), eip.IPv4Interface('0.0.2.0'), False),
            (eip.IPv4Interface('0.0.2.0'), eip.IPv4Interface('0.0.1.0'), True),
            (eip.IPv4Interface((250, 4)), eip.IPv4Interface(250), True),
            (eip.IPv4Interface('0.0.1.0/4'), eip.IPv4Address('0.0.1.0'), True),
            (eip.IPv4Interface('0.0.1.0'), eip.IPv4Address('0.0.1.0'), True),
            (eip.IPv4Interface('0.0.1.0'), 999, NotImplemented),
            (eip.IPv4Interface(1), eip.IPv4Network(1), NotImplemented),
        ]
        for a, b, expect in data:
            self.assertEqual(a.__ge__(b), expect, '%r >= %r' % (a, b))

    def test_ipv6interface_eq(self):
        """Test the IPv6Interface.__eq__ method."""
        data = [
            (eip.IPv6Interface('::1:0'), eip.IPv6Interface('::1:0'), True),
            (eip.IPv6Interface('::1:0%x'), eip.IPv6Interface('::1:0'), False),
            (eip.IPv6Interface('::1%x/9'), eip.IPv6Interface('::1/9'), False),
            (eip.IPv6Interface('::1:0'), eip.IPv6Interface('::2:0'), False),
            (eip.IPv6Interface('::1:0/6'), eip.IPv6Address('::1:0'), False),
            (eip.IPv6Interface('::1:0'), 999, NotImplemented),
            (eip.IPv6Interface(1), eip.IPv6Network(1), NotImplemented),
        ]
        for a, b, expect in data:
            self.assertEqual(a.__eq__(b), expect, '%r == %r' % (a, b))

    def test_ipv6interface_ne(self):
        """Test the IPv6Interface.__ne__ method."""
        data = [
            (eip.IPv6Interface('::1:0'), eip.IPv6Interface('::1:0'), False),
            (eip.IPv6Interface('::1:0%x'), eip.IPv6Interface('::1:0'), True),
            (eip.IPv6Interface('::1%x/9'), eip.IPv6Interface('::1/9'), True),
            (eip.IPv6Interface('::1:0'), eip.IPv6Interface('::2:0'), True),
            (eip.IPv6Interface('::1:0/6'), eip.IPv6Address('::1:0'), True),
            (eip.IPv6Interface('::1:0'), 999, NotImplemented),
            (eip.IPv6Interface(1), eip.IPv6Network(1), NotImplemented),
        ]
        for a, b, expect in data:
            self.assertEqual(a.__ne__(b), expect, '%r != %r' % (a, b))

    def test_ipv6interface_lt(self):
        """Test the IPv6Interface.__lt__ method."""
        data = [
            (eip.IPv6Interface('::1:0'), eip.IPv6Interface('::1:0'), False),
            (eip.IPv6Interface('::1:0'), eip.IPv6Interface('::1:0%x'), True),
            (eip.IPv6Interface('::1:0%x'), eip.IPv6Interface('::1:0'), False),
            (eip.IPv6Interface('::1%x/9'), eip.IPv6Interface('::1/9'), False),
            (eip.IPv6Interface('::1:0'), eip.IPv6Interface('::2:0'), True),
            (eip.IPv6Interface('::2:0'), eip.IPv6Interface('::1:0'), False),
            (eip.IPv6Interface((250, 6)), eip.IPv6Interface(250), False),
            (eip.IPv6Interface('::1:0/6'), eip.IPv6Address('::1:0'), False),
            (eip.IPv6Interface('::1:0'), eip.IPv6Address('::1:0'), False),
            (eip.IPv6Interface('::1:0'), 999, NotImplemented),
            (eip.IPv6Interface(1), eip.IPv6Network(1), NotImplemented),
        ]
        for a, b, expect in data:
            self.assertEqual(a.__lt__(b), expect, '%r < %r' % (a, b))

    def test_ipv6interface_le(self):
        """Test the IPv6Interface.__le__ method."""
        data = [
            (eip.IPv6Interface('::1:0'), eip.IPv6Interface('::1:0'), True),
            (eip.IPv6Interface('::1:0'), eip.IPv6Interface('::1:0%x'), True),
            (eip.IPv6Interface('::1:0%x'), eip.IPv6Interface('::1:0'), False),
            (eip.IPv6Interface('::1%x/9'), eip.IPv6Interface('::1/9'), False),
            (eip.IPv6Interface('::1:0'), eip.IPv6Interface('::2:0'), True),
            (eip.IPv6Interface('::2:0'), eip.IPv6Interface('::1:0'), False),
            (eip.IPv6Interface((250, 6)), eip.IPv6Interface(250), False),
            (eip.IPv6Interface('::1:0/6'), eip.IPv6Address('::1:0'), False),
            (eip.IPv6Interface('::1:0'), eip.IPv6Address('::1:0'), False),
            (eip.IPv6Interface('::1:0'), 999, NotImplemented),
            (eip.IPv6Interface(1), eip.IPv6Network(1), NotImplemented),
        ]
        for a, b, expect in data:
            self.assertEqual(a.__le__(b), expect, '%r <= %r' % (a, b))

    def test_ipv6interface_gt(self):
        """Test the IPv6Interface.__gt__ method."""
        data = [
            (eip.IPv6Interface('::1:0'), eip.IPv6Interface('::1:0'), False),
            (eip.IPv6Interface('::1:0'), eip.IPv6Interface('::1:0%x'), False),
            (eip.IPv6Interface('::1:0%x'), eip.IPv6Interface('::1:0'), True),
            (eip.IPv6Interface('::1%x/9'), eip.IPv6Interface('::1/9'), True),
            (eip.IPv6Interface('::1:0'), eip.IPv6Interface('::2:0'), False),
            (eip.IPv6Interface('::2:0'), eip.IPv6Interface('::1:0'), True),
            (eip.IPv6Interface('::1:0/6'), eip.IPv6Address('::1:0'), True),
            (eip.IPv6Interface('::1:0'), eip.IPv6Address('::1:0'), True),
            (eip.IPv6Interface('::1:0'), 999, NotImplemented),
            (eip.IPv6Interface(1), eip.IPv6Network(1), NotImplemented),
        ]
        for a, b, expect in data:
            self.assertEqual(a.__gt__(b), expect, '%r > %r' % (a, b))

    def test_ipv6interface_ge(self):
        """Test the IPv6Interface.__ge__ method."""
        data = [
            (eip.IPv6Interface('::1:0'), eip.IPv6Interface('::1:0'), True),
            (eip.IPv6Interface('::1:0'), eip.IPv6Interface('::1:0%x'), False),
            (eip.IPv6Interface('::1:0%x'), eip.IPv6Interface('::1:0'), True),
            (eip.IPv6Interface('::1%x/9'), eip.IPv6Interface('::1/9'), True),
            (eip.IPv6Interface('::1:0'), eip.IPv6Interface('::2:0'), False),
            (eip.IPv6Interface('::2:0'), eip.IPv6Interface('::1:0'), True),
            (eip.IPv6Interface('::1:0/6'), eip.IPv6Address('::1:0'), True),
            (eip.IPv6Interface('::1:0'), eip.IPv6Address('::1:0'), True),
            (eip.IPv6Interface('::1:0'), 999, NotImplemented),
            (eip.IPv6Interface(1), eip.IPv6Network(1), NotImplemented),
        ]
        for a, b, expect in data:
            self.assertEqual(a.__ge__(b), expect, '%r >= %r' % (a, b))

    def test_ipv4interface_add(self):
        """Test the IPv4Interface.__add__ method."""
        iface1 = eip.IPv4Interface('0.0.1.0')
        iface2 = eip.IPv4Interface('0.0.2.0')
        iface3 = eip.IPv4Interface('0.0.0.254')
        self.assertEqual(iface1 + 256, iface2)
        self.assertEqual(iface2 + -256, iface1)
        self.assertEqual(iface3 + 2, iface1)
        self.assertEqual(iface1 + -2, iface3)
        iface4 = eip.IPv4Interface('0.0.1.0/24')
        iface5 = eip.IPv4Interface('0.0.2.0/32')
        self.assertEqual(iface4 + 256, iface5)
        # exceptions
        def fn(iface, other):
            return iface + other
        self.assertRaises(TypeError, fn, iface1, 1.0)

    def test_ipv6interface_add(self):
        """Test the IPv6Interface.__add__ method."""
        iface1 = eip.IPv6Interface('::100')
        iface2 = eip.IPv6Interface('::200')
        iface3 = eip.IPv6Interface('::fe')
        self.assertEqual(iface1 + 256, iface2)
        self.assertEqual(iface2 + -256, iface1)
        self.assertEqual(iface3 + 2, iface1)
        self.assertEqual(iface1 + -2, iface3)
        iface4 = eip.IPv6Interface('::100/24')
        iface5 = eip.IPv6Interface('::200/128')
        self.assertEqual(iface4 + 256, iface5)
        # exceptions
        def fn(iface, other):
            return iface + other
        self.assertRaises(TypeError, fn, iface1, 1.0)

    def test_ipv4interface_sub(self):
        """Test the IPv4Interface.__sub__ method."""
        iface1 = eip.IPv4Interface('0.0.1.0')
        iface2 = eip.IPv4Interface('0.0.2.0')
        iface3 = eip.IPv4Interface('0.0.0.254')
        self.assertEqual(iface2 - 256, iface1)
        self.assertEqual(iface1 - -256, iface2)
        self.assertEqual(iface1 - 2, iface3)
        self.assertEqual(iface3 - -2, iface1)
        iface4 = eip.IPv4Interface('0.0.2.0/24')
        iface5 = eip.IPv4Interface('0.0.1.0/32')
        self.assertEqual(iface4 - 256, iface5)
        # exceptions
        def fn(iface, other):
            return iface - other
        self.assertRaises(TypeError, fn, iface1, 1.0)

    def test_ipv6interface_sub(self):
        """Test the IPv6Interface.__sub__ method."""
        iface1 = eip.IPv6Interface('::100')
        iface2 = eip.IPv6Interface('::200')
        iface3 = eip.IPv6Interface('::fe')
        self.assertEqual(iface2 - 256, iface1)
        self.assertEqual(iface1 - -256, iface2)
        self.assertEqual(iface1 - 2, iface3)
        self.assertEqual(iface3 - -2, iface1)
        iface4 = eip.IPv6Interface('::200/24')
        iface5 = eip.IPv6Interface('::100/128')
        self.assertEqual(iface4 - 256, iface5)
        # exceptions
        def fn(iface, other):
            return iface - other
        self.assertRaises(TypeError, fn, iface1, 1.0)

    def test_interface_hash(self):
        """Test the BaseIPInterface.hash method."""
        # IPv4
        iface1 = eip.IPv4Interface('0.0.1.0')
        iface2 = eip.IPv4Interface('0.0.2.0')
        self.assertNotEqual(iface1.__hash__(), iface2.__hash__())
        # IPv6
        iface1 = eip.IPv6Interface('::1:0')
        iface2 = eip.IPv6Interface('::2:0')
        self.assertNotEqual(iface1.__hash__(), iface2.__hash__())

    def test_ipv4interface_is_reserved(self):
        """Test the IPv4Interface.is_reserved method."""
        self.assertFalse(eip.IPv4Interface('239.255.255.255').is_reserved)
        self.assertTrue(eip.IPv4Interface('240.0.0.0').is_reserved)
        self.assertTrue(eip.IPv4Interface('255.255.255.255').is_reserved)

    def test_ipv6interface_is_reserved(self):
        """Test the IPv6Interface.is_reserved method."""
        reserved = (eip.IPv6Network('::/8'),
                    eip.IPv6Network('100::/8'),
                    eip.IPv6Network('200::/7'),
                    eip.IPv6Network('400::/6'),
                    eip.IPv6Network('800::/5'),
                    eip.IPv6Network('1000::/4'),
                    eip.IPv6Network('4000::/3'),
                    eip.IPv6Network('6000::/3'),
                    eip.IPv6Network('8000::/3'),
                    eip.IPv6Network('A000::/3'),
                    eip.IPv6Network('C000::/3'),
                    eip.IPv6Network('E000::/4'),
                    eip.IPv6Network('F000::/5'),
                    eip.IPv6Network('F800::/6'),
                    eip.IPv6Network('FE00::/9'))
        for net in reserved:
            for addr in net.network_address, net.broadcast_address:
                iface = eip.IPv6Interface(int(addr))
                self.assertTrue(iface.is_reserved, '%s - %s' % (net, iface))
        unreserved = (eip.IPv6Network('2000::/8'),)
        for net in unreserved:
            for addr in net.network_address, net.broadcast_address:
                iface = eip.IPv6Interface(int(addr))
                self.assertFalse(iface.is_reserved, '%s - %s' % (net, iface))

    def test_ipv4interface_is_private(self):
        """Test the IPv4Interface.is_private method."""
        self.assertFalse(eip.IPv4Interface('9.255.255.255').is_private)
        self.assertTrue(eip.IPv4Interface('10.0.0.0/2').is_private)
        self.assertTrue(eip.IPv4Interface('10.255.255.255/8').is_private)
        self.assertFalse(eip.IPv4Interface('11.0.0.0/24').is_private)
        self.assertFalse(eip.IPv4Interface('172.15.255.255').is_private)
        self.assertTrue(eip.IPv4Interface('172.16.0.0').is_private)
        self.assertTrue(eip.IPv4Interface('172.31.255.255').is_private)
        self.assertFalse(eip.IPv4Interface('172.32.0.0').is_private)
        self.assertFalse(eip.IPv4Interface('192.167.255.255').is_private)
        self.assertTrue(eip.IPv4Interface('192.168.0.0/24').is_private)
        self.assertTrue(eip.IPv4Interface('192.168.255.255').is_private)
        self.assertFalse(eip.IPv4Interface('192.169.0.0/30').is_private)

    def test_ipv6interface_is_private(self):
        """Test the IPv6Interface.is_private method."""
        self.assertFalse(eip.IPv6Interface(
            'fbff:ffff:ffff:ffff:ffff:ffff:ffff:ffff').is_private)
        self.assertTrue(eip.IPv6Interface('fc00::/8').is_private)
        self.assertTrue(eip.IPv6Interface(
            'fdff:ffff:ffff:ffff:ffff:ffff:ffff:ffff').is_private)
        self.assertFalse(eip.IPv6Interface('fe00::/96').is_private)

    def test_ipv4interface_is_global(self):
        """Test the IPv4Interface.is_global method."""
        self.assertTrue(eip.IPv4Interface('9.255.255.255/0').is_global)
        self.assertFalse(eip.IPv4Interface('10.0.0.0/1').is_global)
        self.assertFalse(eip.IPv4Interface('10.255.255.255/3').is_global)
        self.assertTrue(eip.IPv4Interface('11.0.0.0/4').is_global)
        self.assertFalse(eip.IPv4Interface('100.64.0.8/24').is_global)
        self.assertFalse(eip.IPv4Interface('100.64.0.255/24').is_global)
        self.assertTrue(eip.IPv4Interface('172.15.255.255/5').is_global)
        self.assertFalse(eip.IPv4Interface('172.16.0.0/6').is_global)
        self.assertFalse(eip.IPv4Interface('172.31.255.255/7').is_global)
        self.assertTrue(eip.IPv4Interface('172.32.0.0/8').is_global)
        self.assertTrue(eip.IPv4Interface('192.167.255.255/9').is_global)
        self.assertFalse(eip.IPv4Interface('192.168.0.0/10').is_global)
        self.assertFalse(eip.IPv4Interface('192.168.255.255/11').is_global)
        self.assertTrue(eip.IPv4Interface('192.169.0.0/12').is_global)

    def test_ipv6interface_is_global(self):
        """Test the IPv6Interface.is_global method."""
        self.assertTrue(eip.IPv6Interface(
            'fbff:ffff:ffff:ffff:ffff:ffff:ffff:ffff').is_global)
        self.assertFalse(eip.IPv6Interface('fc00::/1').is_global)
        self.assertFalse(eip.IPv6Interface(
            'fdff:ffff:ffff:ffff:ffff:ffff:ffff:ffff/2').is_global)
        self.assertTrue(eip.IPv6Interface('fe00::/127').is_global)

    def test_ipv4interface_is_multicast(self):
        """Test the IPv4Interface.is_multicast method."""
        self.assertFalse(eip.IPv4Interface('223.255.255.255').is_multicast)
        self.assertTrue(eip.IPv4Interface('224.0.0.0/1').is_multicast)
        self.assertTrue(eip.IPv4Interface('239.255.255.255/1').is_multicast)
        self.assertFalse(eip.IPv4Interface('240.0.0.0/1').is_multicast)

    def test_ipv6interface_is_multicast(self):
        """Test the IPv6Interface.is_multicast method."""
        self.assertFalse(eip.IPv6Interface(
            'feff:ffff:ffff:ffff:ffff:ffff:ffff:ffff').is_multicast)
        self.assertTrue(eip.IPv6Interface('ff00::/1').is_multicast)
        self.assertTrue(eip.IPv6Interface(
            'ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff/1').is_multicast)

    def test_ipv4interface_is_unspecified(self):
        """Test the IPv4Interface.is_unspecified method."""
        self.assertFalse(eip.IPv4Interface('255.255.255.255').is_unspecified)
        self.assertFalse(eip.IPv4Interface('0.0.0.0/31').is_unspecified)
        self.assertTrue(eip.IPv4Interface('0.0.0.0/32').is_unspecified)
        self.assertFalse(eip.IPv4Interface('0.0.0.1/9').is_unspecified)

    def test_ipv6interface_is_unspecified(self):
        """Test the IPv6Interface.is_unspecified method."""
        self.assertTrue(eip.IPv6Interface('::').is_unspecified)
        self.assertTrue(eip.IPv6Interface('::/128').is_unspecified)
        self.assertFalse(eip.IPv6Interface('::/0').is_unspecified)
        self.assertFalse(eip.IPv6Interface('::1/3').is_unspecified)

    def test_ipv4interface_is_loopback(self):
        """Test the IPv4Interface.is_loopback method."""
        self.assertFalse(eip.IPv4Interface('126.255.255.255').is_loopback)
        self.assertTrue(eip.IPv4Interface('127.0.0.0/7').is_loopback)
        self.assertTrue(eip.IPv4Interface('127.0.0.255/7').is_loopback)
        self.assertFalse(eip.IPv4Interface('128.0.0.0/7').is_loopback)

    def test_ipv6interface_is_loopback(self):
        """Test the IPv6Interface.is_loopback method."""
        self.assertTrue(eip.IPv6Interface('::1').is_loopback)
        self.assertFalse(eip.IPv6Interface('::1/7').is_loopback)
        self.assertFalse(eip.IPv6Interface('::').is_loopback)
        self.assertFalse(eip.IPv6Interface('::2/7').is_loopback)

    def test_ipv4interface_is_link_local(self):
        """Test the IPv4Interface.is_link_local method."""
        self.assertFalse(eip.IPv4Interface('169.253.255.5/0').is_link_local)
        self.assertTrue(eip.IPv4Interface('169.254.0.0/0').is_link_local)
        self.assertTrue(eip.IPv4Interface('169.254.255.255/0').is_link_local)
        self.assertFalse(eip.IPv4Interface('169.255.0.0/0').is_link_local)

    def test_ipv6interface_is_link_local(self):
        """Test the IPv6Interface.is_link_local method."""
        self.assertFalse(eip.IPv6Interface(
            'fe7f:ffff:ffff:ffff:ffff:ffff:ffff:ffff/0').is_link_local)
        self.assertTrue(eip.IPv6Interface('fe80::/0').is_link_local)
        self.assertTrue(eip.IPv6Interface(
            'febf:ffff:ffff:ffff:ffff:ffff:ffff:ffff/0').is_link_local)
        self.assertFalse(eip.IPv6Interface('fec0::/0').is_link_local)

    def test_ipv6interface_is_site_local(self):
        """Test the IPv6Interface.is_site_local method."""
        self.assertFalse(eip.IPv6Interface(
            'febf:ffff:ffff:ffff:ffff:ffff:ffff:ffff/16').is_site_local)
        self.assertTrue(eip.IPv6Interface('fec0::/16').is_site_local)
        self.assertTrue(eip.IPv6Interface(
            'fedf:ffff:ffff:ffff:ffff:ffff:ffff:ffff/16').is_site_local)

    def test_ipv4interface_reverse_pointer(self):
        """Test the IPv4Interface.reverse_pointer method."""
        data = [
            (eip.IPv4Interface('1.2.3.4'), '4/32.3.2.1.in-addr.arpa'),
            (eip.IPv4Interface('12.0.0.1/8'), '1/8.0.0.12.in-addr.arpa')
        ]
        for iface, expect in data:
            self.assertEqual(iface.reverse_pointer, expect)

    def test_ipv6interface_reverse_pointer(self):
        """Test the IPv6Interface.reverse_pointer method."""
        data = [
            (eip.IPv6Interface('1:2:3:4:5:6:7:8/126'),
             '6.2.1./.8.0.0.0.7.0.0.0.6.0.0.0.5.0.0.0.'
             '4.0.0.0.3.0.0.0.2.0.0.0.1.0.0.0.ip6.arpa'),
        ]
        for iface, expect in data:
            self.assertEqual(iface.reverse_pointer, expect)

    def test_interface_reduce(self):
        """Test the IPv?Interface.reduce method."""
        data = [
            eip.IPv4Interface('1.2.3.4'),
            eip.IPv4Interface('127.0.0.1/8'),
            eip.IPv6Interface('::/88'),
            eip.IPv6Interface('2001::2:4/33'),
        ]
        for iface in data:
            _class, args = iface.__reduce__()
            got = _class(*args)
            self.assertEqual(got, iface)

    def test_ipv6interface_ipv4_mapped(self):
        """Test the IPv6Interface.ipv4_mapped method."""
        iface = eip.IPv6Interface('::fffe:ffff:ffff')
        self.assertEqual(iface.ipv4_mapped, None)
        iface = eip.IPv6Interface('::ffff:0:0/48')
        self.assertEqual(iface.ipv4_mapped, eip.IPv4Address('0.0.0.0'))
        iface = eip.IPv6Interface('::ffff:ffff:ffff/48')
        self.assertEqual(iface.ipv4_mapped, eip.IPv4Address('255.255.255.255'))
        iface = eip.IPv6Interface('::1:0:0:0/96')
        self.assertEqual(iface.ipv4_mapped, None)

    def test_ipv6interface_teredo(self):
        """Test the IPv6Interface.teredo method."""
        iface = eip.IPv6Interface('2000:ffff:ffff:ffff:ffff:ffff:ffff:ffff')
        self.assertEqual(iface.teredo, None)
        iface = eip.IPv6Interface('2001:0000::/48')
        self.assertEqual(iface.teredo, (eip.IPv4Address('0.0.0.0'),
                                       eip.IPv4Address('0.0.0.0')))
        iface = eip.IPv6Interface('2001:0000:0000:0001:0000:0000:0000:0002/8')
        self.assertEqual(iface.teredo, (eip.IPv4Address('0.0.0.1'),
                                       eip.IPv4Address('0.0.0.2')))
        iface = eip.IPv6Interface('2001:0000:ffff:ffff:0000:0000:ffff:ffff/1')
        self.assertEqual(iface.teredo, (eip.IPv4Address('255.255.255.255'),
                                       eip.IPv4Address('255.255.255.255')))
        iface = eip.IPv6Interface('2001:0001::/16')
        self.assertEqual(iface.teredo, None)

    def test_ipv6interface_sixtofour(self):
        """Test the IPv6Interface.sixtofour method."""
        iface = eip.IPv6Interface('2001:ffff:ffff:ffff:ffff:ffff:ffff:ffff')
        self.assertEqual(iface.sixtofour, None)
        iface = eip.IPv6Interface('2002:0000:0000:0000:0000:0000:0000:0000')
        self.assertEqual(iface.sixtofour, eip.IPv4Address('0.0.0.0'))
        iface = eip.IPv6Interface('2002:ffff:ffff:0000:0000:0000:0000:0000')
        self.assertEqual(iface.sixtofour, eip.IPv4Address('255.255.255.255'))
        iface = eip.IPv6Interface('2003:0000:0000:0000:0000:0000:0000:0000')
        self.assertEqual(iface.sixtofour, None)

    def test_interface_hostmask(self):
        """Test the BaseIPInterface.hostmask method."""
        for preflen in range(33):
            iface = eip.IPv4Interface((0, preflen))
            addr = eip.IPv4Address(2**(32 - preflen) - 1)
            self.assertEqual(iface.hostmask, addr)
        for preflen in range(129):
            iface = eip.IPv6Interface((0, preflen))
            addr = eip.IPv6Address(2**(128 - preflen) - 1)
            self.assertEqual(iface.hostmask, addr)

    def test_interface_ip(self):
        """Test the IPv?Interface.ip method."""
        data = [
            '1.2.3.4',
            '127.0.0.1/8',
            '::/88',
            '::%abc/88',
            '2001::2:4/33',
        ]
        for addr_str in data:
            iface = eip.ip_interface(addr_str)
            addr = eip.ip_address(addr_str.split('/')[0])
            self.assertEqual(iface.ip, addr)

    def test_ipv4interface_with_prefixlen(self):
        """Test the IPv4Interface.with_prefixlen method."""
        net = eip.IPv4Interface('1.2.3.4/31')
        self.assertEqual(net.with_prefixlen, '1.2.3.4/31')
        net = eip.IPv4Interface('2.0.0.0/8')
        self.assertEqual(net.with_prefixlen, '2.0.0.0/8')
        net = eip.IPv4Interface('255.255.255.255')
        self.assertEqual(net.with_prefixlen, '255.255.255.255/32')

    def test_ipv4interface_with_netmask(self):
        """Test the IPv4Interface.with_netmask method."""
        net = eip.IPv4Interface('9.9.9.9/0')
        self.assertEqual(net.with_netmask, '9.9.9.9/0.0.0.0')
        net = eip.IPv4Interface('1.0.0.0/8')
        self.assertEqual(net.with_netmask, '1.0.0.0/255.0.0.0')
        net = eip.IPv4Interface('1.2.0.0/16')
        self.assertEqual(net.with_netmask, '1.2.0.0/255.255.0.0')
        net = eip.IPv4Interface('1.2.3.0/24')
        self.assertEqual(net.with_netmask, '1.2.3.0/255.255.255.0')
        net = eip.IPv4Interface('1.2.3.4/32')
        self.assertEqual(net.with_netmask, '1.2.3.4/255.255.255.255')

    def test_ipv4interface_with_hostmask(self):
        """Test the IPv4Interface.with_hostmask method."""
        net = eip.IPv4Interface('9.9.9.9/0')
        self.assertEqual(net.with_hostmask, '9.9.9.9/255.255.255.255')
        net = eip.IPv4Interface('1.0.0.0/8')
        self.assertEqual(net.with_hostmask, '1.0.0.0/0.255.255.255')
        net = eip.IPv4Interface('1.2.0.0/16')
        self.assertEqual(net.with_hostmask, '1.2.0.0/0.0.255.255')
        net = eip.IPv4Interface('1.2.3.0/24')
        self.assertEqual(net.with_hostmask, '1.2.3.0/0.0.0.255')
        net = eip.IPv4Interface('1.2.3.4/32')
        self.assertEqual(net.with_hostmask, '1.2.3.4/0.0.0.0')

    def test_ipv6interface_with_prefixlen(self):
        """Test the IPv6Interface.with_prefixlen method."""
        net = eip.IPv6Interface('1:2:3::4/5')
        self.assertEqual(net.with_prefixlen, '1:2:3::4/5')
        net = eip.IPv6Interface('2::/16')
        self.assertEqual(net.with_prefixlen, '2::/16')
        net = eip.IPv6Interface('ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff')
        self.assertEqual(net.with_prefixlen,
                         'ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff/128')

    def test_ipv6interface_with_netmask(self):
        """Test the IPv6Interface.with_netmask method."""
        net = eip.IPv6Interface('9:9:9:9::/0')
        self.assertEqual(net.with_netmask, '9:9:9:9::/::')
        net = eip.IPv6Interface('12::/16')
        self.assertEqual(net.with_netmask, '12::/ffff::')
        net = eip.IPv6Interface('1:2:3::/48')
        self.assertEqual(net.with_netmask, '1:2:3::/ffff:ffff:ffff::')
        net = eip.IPv6Interface('1:2:3:4::/64')
        self.assertEqual(net.with_netmask, '1:2:3:4::/ffff:ffff:ffff:ffff::')

    def test_ipv6interface_with_hostmask(self):
        """Test the IPv6Interface.with_hostmask method."""
        net = eip.IPv6Interface('9:9:9:9::/0')
        self.assertEqual(net.with_hostmask,
                         '9:9:9:9::/ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff')
        net = eip.IPv6Interface('12::/16')
        self.assertEqual(net.with_hostmask,
                         '12::/0:ffff:ffff:ffff:ffff:ffff:ffff:ffff')
        net = eip.IPv6Interface('1:2:3::/48')
        self.assertEqual(net.with_hostmask,
                         '1:2:3::/::ffff:ffff:ffff:ffff:ffff')
        net = eip.IPv6Interface('1:2:3:4::/64')
        self.assertEqual(net.with_hostmask, '1:2:3:4::/::ffff:ffff:ffff:ffff')

# =============================================================================

if __name__ == '__main__':
    unittest.main()
